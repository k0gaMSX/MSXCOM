; SIMPLE MALLOC

END_BIT:	EQU		7
USED_BIT:	EQU		6

MALLOC_INIT:

	XOR		A
	LD		D,4
	LD		E,2
	CALL	EXTBIO
	
	; COPY JUMP TABLE
	LD		DE,ALL_SEG
	LD		BC,$30
	LDIR

	XOR		A
	LD		(MALLOC_HEAP),A

	LD		(MALLOC_LAST_PAGE),A
	LD		HL,0
	LD		(MALLOC_LAST_ADDR),HL
	
	RET

MALLOC:
; BC: SIZE (0-16381 BYTES)
	
	; FIND HEAP ENTRY
	LD		A,(MALLOC_LAST_PAGE)
	OR		A
	JR		NZ,.FIND_FREE
.ALLOC_FIRST_SEGMENT:
	PUSH	BC
	XOR		A
	LD		B,A
	CALL	ALL_SEG
	POP		BC
	JR		C,.ERROR
	LD		(MALLOC_HEAP),A
	CALL	PUT_P2
	LD		DE,$8000
	LD		(MALLOC_LAST_ADDR),DE
	XOR		A
	SET		END_BIT,A
	LD		(DE),A
	XOR		A
	INC		DE
	LD		(DE),A ; NEXT SEGMENT EMPTY
	LD		A,(MALLOC_HEAP)
	LD		(MALLOC_LAST_PAGE),A
.FIND_FREE:
	CALL	PUT_P2
	LD		DE,(MALLOC_LAST_ADDR)
	INC		BC
	INC		BC
	EX		AF,AF'
	CALL	FIND_FREE_CHUNK.CHECK_CHUNK
	EX		AF,AF'	
	LD		A,D
	OR		E
	JP		Z,.TRY_AGAIN
	EX		DE,HL
	LD		(MALLOC_LAST_ADDR),HL
	INC		HL
	INC		HL
	EX		AF,AF'
	LD		(MALLOC_LAST_PAGE),A
	RET
.TRY_AGAIN:
	LD		A,(MALLOC_HEAP)
	OR		A
	JR		Z,.ERROR
	DEC		BC
	DEC		BC
	CALL	FIND_FREE_CHUNK
	EX		AF,AF'	
	LD		A,D
	OR		E
	JR		Z,.ERROR
	EX		DE,HL
	LD		(MALLOC_LAST_ADDR),HL
	INC		HL
	INC		HL
	EX		AF,AF'
	LD		(MALLOC_LAST_PAGE),A
	RET

.ERROR:
	LD		H,0
	LD		L,0
	XOR		A
	RET
	
FREE:
; A - SEGMENT
; HL - ADDRES
	CALL	PUT_P2
	DEC		HL
	LD		E,(HL)
	DEC		HL
	LD		D,(HL)
	RES		USED_BIT,D
	LD		(HL),D
	
	LD		(MALLOC_LAST_PAGE),A
	LD		(MALLOC_LAST_ADDR),HL
	
	RET

FIND_FREE_CHUNK:
; BC SIZE
; RET DE ADDRESS
	INC		BC
	INC		BC ; HEADER
.CHECK_SEGMENT:
	EX		AF,AF'	; SAVE CURRENT SEGMENT
	LD		DE,$8000 ; DATA SEGMENT START
.CHECK_CHUNK:
	LD		A,(DE)
	BIT		END_BIT,A
	JR		Z,.CHECK_USED
	; END CHUNK IN SEGMENT
	; CHECK REMAINING SEGMENT SIZE
	LD		HL,$C000
	AND		A
	SBC		HL,DE
	PUSH	BC
	INC		BC	; ADD EoS BYTE
	INC		BC	; ADD NEXT PAGE BYTE
	AND		A
	SBC		HL,BC
	POP		BC
	JR		C,.NEXT_SEGMENT
.USE_LAST_CHUNK:
	INC		DE
	LD		A,(DE)
	PUSH	AF	; SAVE NEXT SEGMENT
	DEC		DE
	LD		A,B
	AND		00111111B
	SET		USED_BIT,A
	LD		(DE),A
	INC		DE
	LD		A,C
	LD		(DE),A ;SIZE IS BIG ENDIAN
	DEC		DE
	LD		H,D
	LD		L,E
	ADC		HL,BC
	XOR		A
	SET		END_BIT,A
	LD		(HL),A ; EoS BYTE
	INC		HL
	POP		AF
	LD		(HL),A ; NEXT SEGMENT
	EX		AF,AF' ; RESTORE CURRENT SEGMENT
	RET
.CHECK_USED:
	BIT		USED_BIT,A
	JR		Z,.CHECK_SIZE
	; USED GO NEXT CHUNK IN SEGMENT
.NEXT_CHUNK:	
	EX		DE,HL
	LD		D,(HL)
	INC		HL
	LD		E,(HL)
	DEC		HL
	LD		A,D
	AND		00111111B
	LD		D,A
	ADD		HL,DE
	EX		DE,HL
	JP		.CHECK_CHUNK
.CHECK_SIZE:
	LD		A,(DE)
	AND		00111111B
	LD		H,A
	INC		DE
	LD		A,(DE) ; SIZE IS BIG ENDIAN
	LD		L,A
	DEC		DE
	SBC		HL,BC
	JR		C,.NEXT_CHUNK
.USE_CHUNK:
	LD		A,H ; CHECK REMAING SIZE
	OR		A
	JR		NZ,.BIG_ENOUGH
	LD		A,L
	CP		3 ;  IS THERE SPACE ENOUGH FOR A 1-BYTE ALLOC ?
	JR		NC,.BIG_ENOUGH
	ADD		A,C
	LD		C,A	; JUST MERGE THE REMAINING BYTES TO CURRENT CHUNK
	LD		A,0
	ADC		A,B
	LD		B,A
	LD		HL,0
.BIG_ENOUGH:
	LD		A,B
	AND		00111111B
	SET		USED_BIT,A
	LD		(DE),A
	INC		DE
	LD		A,C
	LD		(DE),A ;SIZE IS BIG ENDIAN
	DEC		DE

	LD		A,H
	OR		L
	JR		Z,.MERGED
	
	PUSH	HL
	LD		H,B
	LD		L,C
	ADD		HL,DE
	POP		BC
	RES		USED_BIT,B
	LD		(HL),B
	INC		HL
	LD		(HL),C
	
.MERGED:
	EX		AF,AF' ; CURRENT SEGMENT
	RET	
.NEXT_SEGMENT:
	INC		DE
	LD		A,(DE)
	DEC		DE
	OR		A
	JR		Z,.END_OF_HEAP
	PUSH	BC
	CALL	PUT_P2
	POP		BC
	JP		.CHECK_SEGMENT
	
.END_OF_HEAP:
	; END OF ALLOCATED SEGMENTS
	PUSH	BC
	PUSH	DE
	XOR		A
	LD		B,A
	CALL	ALL_SEG
	POP		DE
	JR		C,.ERROR
	INC		DE
	LD		(DE),A
	DEC		DE
	CALL	PUT_P2
	POP		BC
	EX		AF,AF'
	LD		DE,$8000
	XOR		A
	SET		END_BIT,A
	LD		(DE),A
	XOR		A
	INC		DE
	LD		(DE),A ; NEXT SEGMENT EMPTY
	EX		AF,AF'
	JP		.CHECK_SEGMENT	
.ERROR:
	POP		BC
	XOR		A
	LD		D,A
	LD		E,A
	RET

MALLOC_COALESCE:
	LD		A,(MALLOC_HEAP)
	OR		A
	RET		Z
	
	PUSH	IX
	PUSH	IY
	LD		IX,MALLOC_HEAP
	LD		IYH,A
	CALL	PUT_P2
	CALL	COALESCE_CHUNK
	LD		DE,$8000
	LD		(MALLOC_LAST_ADDR),DE
	LD		A,(MALLOC_HEAP)
	LD		(MALLOC_LAST_PAGE),A
	POP		IY
	POP		IX
	RET
	
COALESCE_CHUNK:
.CHECK_SEGMENT:
	OR		A
	RET		Z
	EX		AF,AF'	; SAVE CURRENT SEGMENT
	LD		DE,$8000 ; DATA SEGMENT START
.CHECK_CHUNK:
	LD		A,(DE)
	BIT		END_BIT,A	
	JR		Z,.CHECK_USED
	; END OF SEGMENT
	LD		HL,$8000
	AND		A
	SBC		HL,DE ; CHECK IF IS START
	JR		NZ,.NEXT_SEGMENT	
	;; FREE SEGMENT
	INC		DE
	LD		A,(DE)
	PUSH	AF	; SAVE NEXT SEGMENT

	PUSH	IY
	POP		AF
	CALL	PUT_P2 ; PUT PREVIOUS PAGE
	
	POP		AF ; RESTORE NEXT SEGMENT
	LD		(IX),A ; SET PREV NEXT AS CUR NEXT
	
	EX		AF,AF'
	LD		B,0
	CALL	FRE_SEG
	EX		AF,AF'

	OR		A
	RET		Z
	CALL	PUT_P2
	JP		.CHECK_SEGMENT

.CHECK_USED:
	BIT		USED_BIT,A
	JR		Z,.FREE_CHUNK
	; USED GO NEXT CHUNK IN SEGMENT
.NEXT_CHUNK:	
	EX		DE,HL
	LD		D,(HL)
	INC		HL
	LD		E,(HL)
	DEC		HL
	LD		A,D
	AND		00111111B
	LD		D,A
	ADD		HL,DE
	EX		DE,HL
	JP		.CHECK_CHUNK

.FREE_CHUNK:
	LD		H,D
	LD		L,E
	
	AND		00111111B
	LD		B,A
	INC		DE
	LD		A,(DE)
	DEC		DE
	LD		C,A
	ADD		HL,BC
	; HL = NEXT CHUNK
	LD		A,(HL)

	BIT		END_BIT,A	
	JR		Z,.NOT_END
	
	LD		A,(DE)
	SET		END_BIT,A
	LD		(DE),A
	INC		DE
	INC		HL
	LD		A,(HL)
	LD		(DE),A
	DEC		DE
	JP		.CHECK_CHUNK
	
.NOT_END:
	BIT		USED_BIT,A
	JR		NZ,.NEXT_CHUNK
	
	PUSH	DE
	LD		A,(HL)
	AND		00111111B
	LD		D,A
	INC		HL
	LD		E,(HL)
	EX		DE,HL
	ADD		HL,BC
	POP		DE
	EX		DE,HL
	LD		(HL),D
	INC		HL
	LD		(HL),E
	DEC		HL
	EX		DE,HL
	LD		A,(DE)
	JP		.FREE_CHUNK
	
;--
.NEXT_SEGMENT:
	INC		DE
	PUSH	DE
	POP		IX
	EX		AF,AF'
	LD		IYH,A
	EX		AF,AF'
	LD		A,(DE) ; NEXT SEG
	DEC		DE
	OR		A
	RET		Z
	CALL	PUT_P2
	JP		.CHECK_SEGMENT
