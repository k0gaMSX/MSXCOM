%include "z80r800.inc"
%include "z80().inc"
%include "tniasm.inc"

%OUTFILE    "DISK\MC.COM"
%SYMFILE	"mc.sym"
%ORG		$100

PAGE2: 		EQU	RELOC_START.PAGE2
PAGE1: 		EQU	RELOC_START.PAGE1
PAGE0: 		EQU	RELOC_START.PAGE0
DOS_PAGE2:	EQU	RELOC_START.DOS_PAGE2
DOS_PAGE1:	EQU	RELOC_START.DOS_PAGE1
DOS_PAGE0:	EQU	RELOC_START.DOS_PAGE0

START:
	LD		C,_DOSVER
	CALL	BDOS
	OR		A
	RET		NZ
	LD		A,B
	CP		$02
	JP		M,.WRONG_DOS_VERSION	
	EX		DE,HL
	LD		DE,$0220
	AND		A
	SBC		HL,DE
	JP		M,.WRONG_DOS_VERSION

	LD		C,_GENV
	LD		HL,STR_SHELL
	LD		DE,SHELL
	LD		B,255
	CALL	BDOS
	LD		A,(SHELL)
	OR		A
	JP		Z,.NO_SHELL
	
	CALL	MALLOC_INIT
	
	XOR		A
	LD		B,A
	CALL	ALL_SEG
	JP		C,.MEM_ERROR
	LD		(PAGE2),A

	XOR		A
	LD		B,A
	CALL	ALL_SEG
	JP		C,.MEM_ERROR
	LD		(PAGE1),A
	
	XOR		A
	LD		B,A
	CALL	ALL_SEG
	JP		C,.MEM_ERROR
	LD		(PAGE0),A

	XOR		A
	LD		B,A
	CALL	ALL_SEG
	JP		C,.MEM_ERROR
	
	PUSH	AF
	XOR		A
	LD		B,A
	CALL	ALL_SEG
	JP		C,.MEM_ERROR	
	LD		B,0
	CALL	FRE_SEG
	POP		AF
	LD		B,0
	CALL	FRE_SEG
	
	CALL	GET_P0
	LD		(DOS_PAGE0),A
	CALL	GET_P1
	LD		(DOS_PAGE1),A
	CALL	GET_P2
	LD		(DOS_PAGE2),A
		
	DI
	LD		A,($0006)
	LD		B,A
	LD		(_STACK),SP
	LD		DE,(_STACK)
	LD		HL,RELOC_START - RELOC_END
	ADD		HL,DE
	LD		A,L
	CP		B
	JP		M,.ADJUST
	JR		.SET
.ADJUST:
	DEC		H
.SET:
	LD		L,B
	LD		(_RELOC),HL
	LD		SP,(_RELOC)
	
	; SET NEW DOS RETURN POINT
	LD		HL,(_RELOC)
	LD		DE,RELOC_START.RETURN-RELOC_START
	ADD		HL,DE
	EX		DE,HL
	LD		HL,($0001)
	INC		HL
	LD		C,(HL)
	INC		HL
	LD		B,(HL)
	DEC		HL
	LD		(_RETURN),BC
	LD		(HL),E
	INC		HL
	LD		(HL),D
	; BDOS ENTRY POINT
	LD		DE,($0006)
	LD		(RELOC_START+1),DE
	LD		DE,(_RELOC)
	LD		($0006),DE
	; RETURN STAC
	LD		HL,RELOC_START.RETURN
	INC		HL
	LD		DE,(_RELOC)
	LD		(HL),E
	INC		HL
	LD		(HL),D
		
	; COPY TO PAGES
	DI
	LD		A,(PAGE0)
	CALL	PUT_P2
	LD		HL,0
	LD		DE,$8000
	LD		BC,$4000
	LDIR
	CALL	PUT_P0
	
	LD		A,(PAGE1)
	CALL	PUT_P2
	LD		HL,$4000
	LD		DE,$8000
	LD		BC,$4000
	LDIR
	
	LD		A,(PAGE2)
	CALL	PUT_P1
	LD		A,(DOS_PAGE2)
	CALL	PUT_P2
	LD		HL,$8000
	LD		DE,$4000
	LD		BC,$4000
	LDIR
	
	LD		A,(PAGE1)
	CALL	PUT_P1
	LD		A,(PAGE2)
	CALL	PUT_P2

; SET RELOC CODE

	LD		DE,(_RELOC)
	LD		HL,RELOC_START
	LD		BC,RELOC_END - RELOC_START
	LDIR	
	
	EI	
	
	XOR		A
	LD		(REQUEST_EXIT),A

	CALL	KNJCHK
	JR		Z,.NO_KANJI
	CALL	RD_KNJ
	LD		(KANJI_MODE),A
	LD		A,0
	CALL	WRTKNJ
.NO_KANJI:
	
	CALL	SET_ERROR_HANDLER	
	CALL	WM_INIT
	
	CALL	PREMULT_INIT
	CALL	VIDEO_INIT

	CALL	PARSE_PARAMS
	CALL	LOAD_USER_MENU
	CALL	SET_PALETTE
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	CALL	SET_NAVIGATION_FKEYS
	LD		IX,LEFT_VIEW
	CALL	WINDOW_SET_FOCUS	
	
.CLEAR_KEYBUFF:
	LD		IX,CHSNS
	CALL	CALLBIOS
	JP		Z,.MAIN_LOOP
	LD		IX,CHGET
	CALL	CALLBIOS
	JP		.CLEAR_KEYBUFF
	
.MAIN_LOOP:
	CALL	WM_UPDATE
	CALL	WM_UPDATE_OBJECTS
	CALL	MC_DRAW
	LD		A,(REQUEST_EXIT)
	OR		A
	JP		Z,.MAIN_LOOP

.EXIT:
	CALL	UNSET_ERROR_HANDLER
	CALL	VIDEO_RESTORE_SCREEN

	CALL	KNJCHK
	JR		Z,.NO_KANJI2
	CALL	RD_KNJ
	LD		A,(KANJI_MODE)
	CALL	WRTKNJ
.NO_KANJI2:
	
	DI
	LD		BC,(_RETURN)
	LD		HL,($0001)
	INC		HL
	LD		(HL),C
	INC		HL
	LD		(HL),B

	LD		SP,(_RELOC)
	LD		HL,(_RELOC)
	INC		HL
	LD		E,(HL)
	INC		HL
	LD		D,(HL)
	LD		($0006),DE
	EI
	LD		HL,(_RELOC)
	LD		DE,RELOC_START.EXIT-RELOC_START
	ADD		HL,DE
	JP		(HL)
	
.ABORT:
	DI
	LD		BC,(_RETURN)
	LD		HL,($0001)
	INC		HL
	LD		(HL),C
	INC		HL
	LD		(HL),B

	LD		SP,(_RELOC)
	LD		HL,(_RELOC)
	INC		HL
	LD		E,(HL)
	INC		HL
	LD		E,(HL)
	INC		HL
	LD		($0006),DE
	EI
	RST		0
.MEM_ERROR:
	LD		C,_STROUT
	LD		DE,STR_MEM_ERROR
	CALL	BDOS
	RST	0	
.WRONG_DOS_VERSION:
	LD		C,_STROUT
	LD		DE,STR_WRONG_DOS_VERSION
	CALL	BDOS
	RST	0	
.NO_SHELL:
	LD		C,_STROUT
	LD		DE,STR_NO_SHELL
	CALL	BDOS
	RST	0	
	
MC_DRAW:	
	LD		HL,0
	LD		(PARENT_ORIGIN),HL
	CALL	WM_DRAW
	CALL	VIDEO_FLUSH
	RET

;;
;;exec
;;

; RELOCATABLE CODE
RELOC_START:
	JP		$0000
.PID:
	DB		$00
.DOS_PAGE0:
	DB		$00
.DOS_PAGE1:
	DB		$00
.DOS_PAGE2:
	DB		$00
.PAGE0:
	DB		$00
.PAGE1:
	DB		$00
.PAGE2:
	DB		$00
.EXEC:	
	LD		HL,0
	ADD		HL,SP
	LD		DE,RELOC_START.DOS_PAGE2-RELOC_START
	ADD		HL,DE

	DI
	LD		A,(HL)
	CALL	PUT_P2
	DEC		HL
	LD		A,(HL)
	CALL	PUT_P1
	DEC		HL
	LD		A,(HL)
	CALL	PUT_P0
	DEC		HL
	EI
	PUSH	HL
	;;
	; load
	LD		DE,SHELL
	LD		C,_OPEN
	LD		A,0
	CALL	BDOS

	LD		HL,SHELL_FIB+21
	LD		E,(HL)
	INC		HL
	LD		D,(HL)
	EX		DE,HL
	LD		DE,$100
	LD		C,_READ
	CALL	BDOS

	LD		C,_CLOSE
	CALL	BDOS
	
	LD		HL,SHELL_PARAMS
	LD		BC,-1
.COUNT:
	INC		BC
	LD		A,(HL)
	INC		HL
	OR		A
	JR		NZ,.COUNT
	LD		A,C
	LD		($0080),A
	OR		A
	JR		NZ,.HAS_PARAMS
	XOR		A
	LD		($0081),A
	JR		.FORK
.HAS_PARAMS:
	LD		A,C
	INC		A
	LD		($0080),A	
	LD		A,' '
	LD		($0081),A
	LD		DE,$0082
	LD		HL,SHELL_PARAMS
	LDIR
	XOR		A
	LD		(DE),A
.FORK:
	LD		C,_FORK
	CALL	BDOS
	POP		HL
	LD		(HL),B ; PARENT PROCESS ID
	LD		HL,$0000
	PUSH	HL
	JP		$100
.RETURN:	
	LD		SP,$0000
	LD		HL,0
	ADD		HL,SP
	INC		HL
	INC		HL
	INC		HL
	
	LD		B,(HL)
	PUSH	HL
	LD		C,_JOIN
	CALL	BDOS
;;
	; INIT MAPPER TABLE
	XOR		A
	LD		D,4
	LD		E,2
	CALL	EXTBIO
	; COPY JUMP TABLE
	LD		DE,ALL_SEG
	LD		BC,$30
	LDIR
	DI
	POP		HL
	INC		HL
	INC		HL
	INC		HL
	INC		HL
	LD		A,(HL)
	INC		HL
	CALL	PUT_P0
	LD		A,(HL)
	INC		HL	
	CALL	PUT_P1
	LD		A,(HL)
	INC		HL
	EI
	JP		MC_EXEC.RECOVER
	
.EXIT:
	PUSH	HL
	; INIT MAPPER TABLE
	XOR		A
	LD		D,4
	LD		E,2
	CALL	EXTBIO
	; COPY JUMP TABLE
	LD		DE,ALL_SEG
	LD		BC,$30
	LDIR

	DI
	POP		HL
	LD		DE,RELOC_START.DOS_PAGE0-RELOC_START.EXIT
	ADD		HL,DE
	LD		A,(HL)
	CALL	PUT_P0
	INC		HL
	LD		A,(HL)
	CALL	PUT_P1
	INC		HL
	LD		A,(HL)
	CALL	PUT_P2
	EI
	RST		0
RELOC_END:


MC_EXEC:
	LD		A,(PAGE2)
	CALL	PUT_P2
	CALL	VIDEO_RESTORE_SCREEN
	CALL	UNSET_ERROR_HANDLER

	LD		A,(SHELL_PARAMS)
	OR		A
	JR		NZ,.NOT_SHELL

	LD		DE,STR_PROMPT_MSG
	LD		C,_STROUT
	CALL	BDOS
	
	LD		A,1
	LD		(SHELL_MODE),A
	JR		.CONT
	
.NOT_SHELL:
	LD		HL,CONSOLE_VIEW+CONSOLE_PATH
	LD		DE,TMP_STR
	CALL	STRCPY
	LD		HL,SHELL_PARAMS
	LD		DE,TMP_STR
	CALL	STRCAT

	LD		HL,STR_ENDLINE
	CALL	STRCAT
	LD		C,_STROUT
	CALL	BDOS
	
	XOR		A
	LD		(SHELL_MODE),A
.CONT:
	LD		C,_GENV
	LD		HL,STR_SHELL
	LD		DE,SHELL
	LD		B,255
	CALL	BDOS

	LD		DE,SHELL
	LD		B,0
	LD		C,_FFIRST
	LD		IX,SHELL_FIB
	CALL	BDOS
		
	LD		SP,(_RELOC)
	LD		HL,(_RELOC)
	LD		DE,RELOC_START.EXEC-RELOC_START
	ADD		HL,DE
.EXEC:
	JP		(HL)
.RECOVER:
	LD		SP,(_RELOC)
	
	LD		A,(SHELL_MODE)
	OR		A
	JR		NZ,.SKIP_MSG
	LD		C,_STROUT
	LD		DE,STR_PRESS_ANY_KEY
	CALL	BDOS

.WAIT:
	LD		IX,CHGET
	CALL	CALLBIOS
.SKIP_MSG:
	CALL	SET_ERROR_HANDLER
	CALL	VIDEO_INIT
	LD		IX,WINDOW_LIST
	CALL	WINDOW_SET_DIRTY
	CALL	VIEW_RESCAN_ALL
	JP		START.MAIN_LOOP

PARSE_PARAMS:
	LD		HL,$0080
	LD		A,(HL)
	OR		A
	RET		Z
	
	LD		DE,$0082
LOOP:
	LD		A,(DE)
	INC		DE
	OR		A
	JR		Z,.END
	CP		' '
	JR		NZ,LOOP
	DEC		DE
	XOR		A
	LD		(DE),A
	INC		DE
	PUSH	DE
	JR		.CONT
.END:
	LD		DE,$FFFF
	PUSH	DE
.CONT:

	LD		HL,$0082
	CALL	STRLEN
	LD		C,B
	LD		B,0
	LD		DE,DOS_CUR_PATH
	LDIR
	DEC		DE
	LD		A,(DE)
	CP		'\'
	JR		Z,.HAS_SLASH
	INC		DE
	LD		A,'\'
	LD		(DE),A	
.HAS_SLASH:
	INC		DE
	XOR		A
	LD		(DE),A

	LD		DE,DOS_CUR_PATH
	LD		B,0
	LD		C,_PARSE
	CALL	DOS
	OR		A
	POP		DE
	RET		NZ
	PUSH	DE
	LD		IX,LEFT_VIEW
	LD		(IX+VIEW_CUR_DRIVE),C
	
	LD		C,_CHDIR
	LD		DE,DOS_CUR_PATH
	CALL	DOS
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,LEFT_VIEW
	LD		A,UPDATE_EVENT
	CALL	WINDOW_UPDATE_FUNCTION

;		
	POP		DE
	LD		HL,$FFFF
	AND		A
	SBC		HL,DE
	RET		Z

	EX		DE,HL
	CALL	STRLEN
	LD		C,B
	LD		B,0
	LD		DE,DOS_CUR_PATH
	LDIR
	DEC		DE
	LD		A,(DE)
	CP		'\'
	JR		Z,.HAS_SLASH2
	INC		DE
	LD		A,'\'
	LD		(DE),A	
.HAS_SLASH2:
	INC		DE
	XOR		A
	LD		(DE),A
	
	LD		DE,DOS_CUR_PATH
	LD		A,(DE)
	OR		A
	RET		Z
	
	LD		B,0
	LD		C,_PARSE
	CALL	DOS	
	OR		A
	RET		NZ
	LD		IX,RIGHT_VIEW
	LD		(IX+VIEW_CUR_DRIVE),C

	LD		C,_CHDIR
	LD		DE,DOS_CUR_PATH
	CALL	DOS
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,RIGHT_VIEW
	LD		A,UPDATE_EVENT
	CALL	WINDOW_UPDATE_FUNCTION
	
	LD		IX,LEFT_VIEW
	CALL	WINDOW_SET_FOCUS
	
	RET

%INCLUDE		"BIOS.INC"
%INCLUDE		"DOS2.INC"
%INCLUDE		"MALLOC.INC"
%INCLUDE		"VIDEO.INC"
%INCLUDE		"UTILS.INC"
%INCLUDE		"WINDOW.INC"
%INCLUDE		"VIEW.INC"	
%INCLUDE		"STRING.INC"
%INCLUDE		"VARS.INC"

