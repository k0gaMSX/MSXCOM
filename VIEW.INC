LOAD_USER_MENU:

	XOR		A
	LD		(MENU_NUM_ITEMS),A

	LD		C,_GENV
	LD		HL,STR_PROGRAM
	LD		DE,DOS_PROGRAM_PATH
	LD		B,66
	CALL	DOS
	
	LD		HL,DOS_PROGRAM_PATH
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
	LD		HL,DOS_CUR_PATH
	CALL	STRLEN
	LD		C,B
	LD		B,0
	ADD		HL,BC
	DEC 	HL
	LD		A,'U'
	LD		(HL),A
	DEC		HL
	LD		A,'N'
	LD		(HL),A
	DEC		HL
	LD		A,'M'
	LD		(HL),A
	
	LD		DE,DOS_CUR_PATH
	XOR		A
	LD		C,_OPEN
	CALL	DOS
	OR		A
	RET		NZ
	
	LD		A,B
	LD		(USER_MENU_HANDLE),A

	LD		HL,USER_MENU_ENTRY
	LD		BC,USER_ENTRY_SIZE
	CALL	ZERO_FILL

.READ_LINE:	

	CALL	READCHAR
	JP		C,.EOF
	CP		'#'
	JP		Z,.COMMENT
	CP		' '
	JP		Z,.READ_LINE
	CP		$09
	JP		Z,.READ_LINE
	CP		'0'
	JP		M,.READ_LINE
	CP		':'
	JP		M,.READ_KEY
	CP		'A'
	JP		M,.READ_LINE
	CP		'['
	JP		M,.READ_KEY
	CP		$0A
	JP		Z,.READ_LINE
	CP		$0D
	JP		Z,.READ_LINE
	CP		' '
	JP		Z,.READ_LINE
	CP		$09
	JP		Z,.READ_LINE	
	JP		.ERROR
.READ_KEY:
	LD		HL,USER_MENU_ENTRY+USER_ENTRY_KEY
	LD		(HL),A
	LD		E,A
	LD		B,32
	LD		HL,USER_MENU_ENTRY+USER_ENTRY_LABEL
	CALL	READCHAR
	JP		C,.EOF
	CP		':'
	JP		NZ,.EDIT
.LABEL:
	CALL	READCHAR
	JP		C,.EOF
	CP		$0A
	JR		Z,.SKIP_LABEL
	CP		$0D
	JR		Z,.READ_COMMAND
	CP		'#'
	JR		Z,.DISCARD_LABEL
	LD		(HL),A
	INC		HL
.SKIP_LABEL:
	DJNZ	.LABEL
.DISCARD_LABEL:
	CALL	READCHAR
	JP		C,.EOF
	CP		$0D
	JR		NZ,.DISCARD_LABEL
.READ_COMMAND:
	LD		HL,USER_MENU_ENTRY+USER_ENTRY_COMMAND
	LD		B,126
.COMMAND:
	CALL	READCHAR
	JP		C,.EOF
	CP		$0A
	JR		Z,.SKIP_COMMAND
	CP		$0D
	JR		Z,.INSERT_COMMAND
	CP		'#'
	JR		Z,.DISCARD_COMMAND
	LD		(HL),A
	INC		HL
.SKIP_COMMAND:
	DJNZ	.COMMAND
.DISCARD_COMMAND:
	CALL	READCHAR
	JP		C,.EOF
	CP		$0D
	JR		NZ,.DISCARD_COMMAND
.INSERT_COMMAND:

	LD		BC,USER_ENTRY_SIZE
	CALL	MALLOC
	OR		A
	JP		Z,.ERROR
		
	PUSH	AF
	PUSH	HL
	LD		BC,USER_ENTRY_SIZE
	EX		DE,HL
	LD		HL,USER_MENU_ENTRY
	LDIR
	POP		HL ; USER ENTRY
	POP		AF ; USER PAGE
	
	EX		AF,AF'
	LD		A,(USER_MENU_PTR+2)
	OR		A
	JP		Z,.FIRST
	
	LD		A,IYH
	CALL	PUT_P2
	
	EX		AF,AF'
	LD		(IX+USER_ENTRY_NEXT),L
	LD		(IX+USER_ENTRY_NEXT+1),H
	LD		(IX+USER_ENTRY_NEXT+2),A

	JP		.NEXT
.EDIT:
	CP		'D'
	LD		D,A
	JP		NZ,.COLOR0
	LD		A,E
	CP		'E'
	JP		NZ,.ERROR
	CALL	READCHAR
	JP		C,.ERROR
	CP		'I'
	JP		NZ,.ERROR
	CALL	READCHAR
	JP		C,.ERROR
	CP		'T'
	JP		NZ,.ERROR
	CALL	READCHAR
	JP		C,.ERROR
	CP		':'
	JP		NZ,.ERROR

	LD		HL,EDITOR_PATH
	LD		BC,67
	CALL	ZERO_FILL
	LD		HL,EDITOR_PATH
.EDITOR_PATH:
	CALL	READCHAR
	JP		C,.EOF
	CP		$0A
	JR		Z,.SKIP_EDITOR_PATH
	CP		$0D
	JR		Z,.END_EDITOR_PATH
	CP		'#'
	JR		Z,.DISCARD_EDITOR_PATH
	LD		(HL),A
	INC		HL	
.SKIP_EDITOR_PATH:
	DJNZ	.EDITOR_PATH
.DISCARD_EDITOR_PATH:
	CALL	READCHAR
	JP		C,.EOF
	CP		$0D
	JR		NZ,.DISCARD_EDITOR_PATH
.END_EDITOR_PATH:
	JP		.READ_LINE

.COLOR0:
	CP		'O'
	LD		D,A
	JP		NZ,.ERROR

	LD		A,E
	CP		'C'
	JP		NZ,.ERROR

	CALL	READCHAR
	JP		C,.ERROR
	CP		'L'
	JP		NZ,.ERROR

	CALL	READCHAR
	JP		C,.ERROR
	CP		'O'
	JP		NZ,.ERROR

	CALL	READCHAR
	JP		C,.ERROR
	CP		'R'
	JP		NZ,.ERROR

	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		NZ,.COLOR1
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		':'
	JP		NZ,.ERROR

	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	ADD		A,A
	ADD		A,A
	ADD		A,A
	ADD		A,A
	LD		(CYAN_PAL),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	LD		(CYAN_PAL+1),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	LD		B,A
	LD		A,(CYAN_PAL)
	OR		B
	LD		(CYAN_PAL),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'/'
	JP		M,.ERROR

	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	ADD		A,A
	ADD		A,A
	ADD		A,A
	ADD		A,A
	LD		(BLACK_PAL),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	LD		(BLACK_PAL+1),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	LD		B,A
	LD		A,(BLACK_PAL)
	OR		B
	LD		(BLACK_PAL),A
	
	JP		.READ_LINE

.COLOR1:
	CP		'1'
	JP		NZ,.ERROR
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		':'
	JP		NZ,.ERROR

	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	ADD		A,A
	ADD		A,A
	ADD		A,A
	ADD		A,A
	LD		(WHITE_PAL),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	LD		(WHITE_PAL+1),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	LD		B,A
	LD		A,(WHITE_PAL)
	OR		B
	LD		(WHITE_PAL),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'/'
	JP		M,.ERROR

	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	ADD		A,A
	ADD		A,A
	ADD		A,A
	ADD		A,A
	LD		(BLUE_PAL),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	LD		(BLUE_PAL+1),A
	
	CALL	READCHAR
	JP		C,.ERROR
	CP		'0'
	JP		M,.ERROR
	CP		'8'
	JP		P,.ERROR
	SUB		'0'
	AND		7
	LD		B,A
	LD		A,(BLUE_PAL)
	OR		B
	LD		(BLUE_PAL),A
	
	JP		.READ_LINE

.FIRST:
	EX		AF,AF'
	LD		(USER_MENU_PTR),HL
	LD		(USER_MENU_PTR+2),A
	
.NEXT:

	PUSH	HL
	POP		IX
	PUSH	AF
	POP		IY

	LD		A,(MENU_NUM_ITEMS)
	INC		A
	LD		(MENU_NUM_ITEMS),A
	CP		255
	JP		Z,.EOF
		
	LD		HL,USER_MENU_ENTRY
	LD		BC,USER_ENTRY_SIZE
	CALL	ZERO_FILL
	
	CALL	.READ_LINE
	
.COMMENT:
	CALL	READCHAR
	JP		C,.EOF
	CP		$0D
	JR		NZ,.COMMENT
	JP		.READ_LINE
	
.EOF:
	LD		A,(USER_MENU_HANDLE)
	LD		B,A
	LD		C,_CLOSE
	CALL	DOS
	RET	
.ERROR:
	LD		A,(USER_MENU_HANDLE)
	LD		B,A
	LD		C,_CLOSE
	CALL	DOS
	
	LD		DE,STR_SPACE
	LD		HL,STR_ERROR_PARSING
	CALL	OPEN_MESSAGE_DLG	

	RET
	
READCHAR:
	PUSH	BC
	PUSH	DE
	PUSH	HL
	
.GETCHAR:
	LD		A,(READ_BUFFER_POS)
	OR		A
	JR		Z,.READ
	DEC		A
	LD		(READ_BUFFER_POS),A
	LD		HL,READ_BUFFER
	ADD		A,L
	LD		L,A
	LD		A,0
	ADC		A,H
	LD		H,A
	LD		A,(HL)
	OR		A
	POP		HL
	POP		DE
	POP		BC
	RET
	
.READ:	
	LD		C,_READ
	LD		DE,READ_BUFFER
	LD		HL,READ_BUFFER_SIZE
	LD		A,(USER_MENU_HANDLE)
	LD		B,A
	CALL	DOS
	OR		A
	JR		NZ,.EOF
	LD		A,L
	OR		A
	JR		Z,.EOF
	LD		(READ_BUFFER_POS),A
	LD		B,L
	SRA		B
	LD		DE,READ_BUFFER
	ADD		HL,DE
	DEC		HL
	LD		A,B
	OR		A
	JP		Z,.GETCHAR
.INVERT:
	LD		A,(DE)
	LD		C,(HL)
	LD		(HL),A
	LD		A,C
	LD		(DE),A
	DEC		HL
	INC		DE
	DJNZ	.INVERT
	
	JP		.GETCHAR
	
.EOF:
	SCF
	POP		HL
	POP		DE
	POP		BC
	RET	
	
VIEW_DRAW:
	CALL		GET_P2
	PUSH		AF
	
	LD			HL,0
	LD			(CURR_ITEM),HL

	XOR			A
	LD			HL,SEL_FILE
	LD			(HL),A
	
	LD			L,(IX+VIEW_SELECTED)
	LD			H,(IX+VIEW_SELECTED+1)
	LD			(SELECTED_ITEM),HL

	LD			L,(IX+VIEW_NUM_FILES)
	LD			H,(IX+VIEW_NUM_FILES+1)
	LD			A,L
	OR			H
	JR			NZ,.HAS_FILES
	LD			HL,0
	LD			(SELECTED_ITEM),HL
.HAS_FILES:
	
	LD			A,(IX+WIN_FLAGS)
	BIT			FOCUS_BIT,A
	LD			A,1
	JR			NZ,.FOCUSED
	XOR			A
.FOCUSED:
	LD			(TMP_FLAGS),A

	LD			H,(IX+AREA_P0+PX)
	LD			L,(IX+AREA_P0+PY)
	LD			D,(IX+AREA_P1+PX)
	LD			E,(IX+AREA_P1+PY)
	CALL		WINDOW_PARENT_ORIGIN
	LD			A,(IX+WIN_ATTR)
	LD			(TMP_ATTR),A
	
	EX			AF,AF'
	LD			A,(FAST_DRAW)
	OR			A
	JR			NZ,.FAST_DRAW
	EX			AF,AF'
	
	PUSH		DE
	PUSH		HL
	CALL		DRAW_BOX
	POP			HL
	POP			DE

	PUSH		HL
	PUSH		DE

	EX			DE,HL
	
	PUSH		AF
	PUSH		DE
	
	LD			DE,TMP_STR
	LD			A,' '
	LD			(DE),A
	INC			DE
	
	PUSH		IX
	POP			HL
	LD			BC,VIEW_VOLUME
	ADD			HL,BC
	CALL		STRCPY

	DEC			DE
	LD			HL,STR_SPACE
	CALL		STRCAT

	PUSH		IX
	POP			HL	
	LD			BC,VIEW_CUR_PATH
	ADD			HL,BC
	
	CALL		STRCAT_NOTRAILSPACE
	
	PUSH		IX
	POP			HL
	LD			BC,VIEW_FILTER
	ADD			HL,BC
	LD			DE,TMP_STR
	CALL		STRCAT

	LD			HL,STR_SPACE
	CALL		STRCAT	
	
	LD			HL,TMP_STR
	CALL		STRLEN
	LD			A,B
	CP			38
	JP			M,.OK
	LD			B,38
.OK:
	POP			DE
	INC			D
	POP			AF
	CALL		VIDEO_PRINT_SIZE
	
	POP			DE
	POP			HL

.FAST_DRAW:
	LD			A,E
	SUB			L
	LD			B,A
	DEC			B
	DEC			B
	DEC			B
	DEC			B
	
	PUSH		BC
	EX			DE,HL
	LD			HL,STR_VIEW_HEADER
	LD			B,38
	LD			A,(TMP_ATTR)
	SET			7,A
	INC			D
	INC			E
	PUSH		DE
	CALL		VIDEO_PRINT_SIZE
	POP			DE
	POP			BC

	EX			AF,AF'
	LD			L,(IX+WIN_CHILD)
	LD			H,(IX+WIN_CHILD+1)
	LD			A,(IX+WIN_CHILD+2)
	EXX
	LD			C,(IX+VIEW_SCROLL)
	LD			B,(IX+VIEW_SCROLL+1)
	EXX
	PUSH		HL
	POP			IY ; CHILD
	OR			A
	JR			Z,.SKIP_CHILD
	CALL		PUT_P2
.SCROLL:
	EXX
	LD			A,C
	OR			B
	JR			Z,.FIRST_ITEM
.LOOP_ITEM:
	LD			L,(IY+WIN_NEXT)
	LD			H,(IY+WIN_NEXT+1)
	LD			A,(IY+WIN_NEXT+2)
	PUSH		HL
	POP			IY
	OR			A
	JR			Z,.FIRST_ITEM
	CALL		PUT_P2

	LD			HL,(CURR_ITEM)
	INC			HL
	LD			(CURR_ITEM),HL	
	
	DEC			BC
	LD			A,B
	OR			C
	JR			NZ,.LOOP_ITEM
.FIRST_ITEM:
	EXX	
	
.SKIP_CHILD:
	EX			AF,AF'
	XOR			A
	LD			(TMP_STR),A
.BODY:
	PUSH		BC
	INC			E
	PUSH		DE

	CALL		VIEW_ITEM_FORMAT
	LD			A,C
	EXX
	LD			C,A
	LD			HL,(CURR_ITEM)
	LD			DE,(SELECTED_ITEM)
	OR			A
	SBC			HL,DE
	JR			NZ,.NOT_FOCUSED	
	;EXX
	;EXX
	LD			A,C
	LD			(SEL_ATTR),A
	LD			DE,SEL_FILE
	LD			HL,TMP_STR
	LD			B,13
.SEL_NAME:
	LD			A,(HL)
	LD			(DE),A
	INC			DE
	INC			HL
	DJNZ		.SEL_NAME
	EX			DE,HL
	LD			(HL),0
	LD			A,(TMP_FLAGS)
	OR			A
	JR			Z,.NOT_FOCUSED	
	LD			A,CYAN_COLOR
	JR			.PRINT_BODY
.NOT_FOCUSED:
	LD			A,(TMP_ATTR)
.PRINT_BODY:
	EXX
	CALL		VIDEO_PRINT_SIZE
	
	LD			HL,(CURR_ITEM)
	INC			HL
	LD			(CURR_ITEM),HL
	
	POP			DE
	POP			BC
	DJNZ		.BODY
	
	POP			AF
	CALL		PUT_P2

	DEC			D
	INC			E
	LD			HL,STR_VIEW_SEP
	LD			B,40
	PUSH		DE
	LD			A,(TMP_ATTR)
	CALL		VIDEO_PRINT_SIZE
	POP			DE
	
	INC			D
	INC			E

	LD			HL,SEL_FILE
	CALL		STRLEN
	PUSH		DE
	LD			A,(TMP_ATTR)
	CALL		VIDEO_PRINT_SIZE
	POP			DE
	
	PUSH		DE
	LD			HL,$2000
	ADD			HL,DE
	EX			DE,HL
	
	LD			HL,TMP_STR
	LD			A,'-'
	LD			B,5
.LOOP_ATTR:
	LD			(HL),A
	INC			HL
	DJNZ		.LOOP_ATTR
	XOR			A
	LD			(HL),A
	LD			HL,TMP_STR
	
	LD			A,(SEL_ATTR)
	LD			B,A
	
	BIT			RDONLY_BIT,B
	JR			Z,.NRO
	LD			A,'r'
	LD			(HL),A
	INC			HL
;	LD			A,' '
;	LD			(HL),A
;	INC			HL
	JR			.NRO2
.NRO:
	INC			HL
;	INC			HL
.NRO2:
	BIT			ARCHIV_BIT,B
	JR			Z,.NARC
	LD			A,'a'
	LD			(HL),A
	INC			HL
;	LD			A,' '
;	LD			(HL),A
;	INC			HL
	JR			.NARC2
.NARC:
	INC			HL
;	INC			HL
.NARC2:
	BIT			DIR_BIT,B
	JR			Z,.NDIR
	LD			A,'d'
	LD			(HL),A
	INC			HL
;	LD			A,' '
;	LD			(HL),A
;	INC			HL
	JR			.NDIR2
.NDIR:
	INC			HL
;	INC			HL
.NDIR2:

	BIT			HIDDEN_BIT,B
	JR			Z,.NHID
	LD			A,'h'
	LD			(HL),A
	INC			HL
;	LD			A,' '
;	LD			(HL),A
;	INC			HL
	JR			.NHID2
.NHID:
	INC			HL
;	INC			HL
.NHID2:

	BIT			SYSTEM_BIT,B
	JR			Z,.NSYS
	LD			A,'s'
	LD			(HL),A
	INC			HL
;	LD			A,' '
;	LD			(HL),A
;	INC			HL
	JR			.NSYS2
.NSYS:
	INC			HL
;	INC			HL
.NSYS2:

	LD			HL,TMP_STR
	CALL		STRLEN
	LD			A,(TMP_ATTR)
	CALL		VIDEO_PRINT_SIZE

	POP			DE
	
	EX			AF,AF'
	LD			A,(FAST_DRAW)
	OR			A
	RET			NZ
	EX			AF,AF'	
	
	INC			D
	INC			D
	INC			E
	PUSH		AF
	PUSH		DE
PRINT_NUMFILES:
	LD			DE,TMP_STR
	LD			HL,STR_VIEW_FOOTER
.FOOTER:
	LD			A,(HL)
	INC			HL
	LD			(DE),A
	INC			DE
	OR			A
	JR			NZ,.FOOTER
	
	LD			DE,TMP_STR
	LD			L,(IX+VIEW_NUM_FILES)
	LD			H,(IX+VIEW_NUM_FILES+1)
	CALL		U16_TO_ASCII
	LD			HL,11
	ADD			HL,DE
	EX			DE,HL
	EXX
	LD			L,(IX+VIEW_FILESIZE)
	LD			H,(IX+VIEW_FILESIZE+1)
	LD			E,(IX+VIEW_FILESIZE+2)
	LD			D,(IX+VIEW_FILESIZE+3)
	CALL		U32_TO_ASCII
		
	POP			DE
	POP			AF
	LD			HL,TMP_STR
	CALL		STRLEN
	LD			A,(TMP_ATTR)
	CALL		VIDEO_PRINT_SIZE

	PUSH		IX
	POP			HL
	LD			DE,VIEW_SEL_FILE
	ADD			HL,DE
	EX			DE,HL
	LD			HL,SEL_FILE+1
	CALL		STRCPY
	
	RET
	
VIEW_ITEM_FORMAT:

	LD			B,A
	PUSH		IY
	POP			HL
	LD			A,L
	OR			H
	JP			Z,.BLANK_LINE

	PUSH		DE
	PUSH		HL
	LD			DE,TMP_STR
	LD			HL,STR_VIEW_BODY
	LD			BC,39
	LDIR	
	POP			DE

	LD			HL,VIEW_ITEM_FILENAME
	ADD			HL,DE
	EX			DE,HL ; DE = FILENAME
		
		
	LD			B,13
	LD			HL,TMP_STR
	LD			A,(IY+VIEW_ITEM_ATTR)
	BIT			DIR_BIT,A
	JR			Z,.NO_DIR
	LD			(HL),'\'
	INC			HL
	JR			.LOOP_NAME
.NO_DIR:
	LD			(HL),' ' 
	INC			HL
.LOOP_NAME:
	LD			A,(DE)
	OR			A
	JR			Z,.END_NAME
	OR			C
	LD			(HL),A
	INC			HL
	INC			DE
	DJNZ		.LOOP_NAME
.END_NAME:

.SIZE_COL:
	INC			HL
	DJNZ		.SIZE_COL	; REACH SIZE COLUMN
	EX			DE,HL ; DE = TARGET
	DEC			DE
	
	EXX
	LD			L,(IY+VIEW_ITEM_FILESIZE)
	LD			H,(IY+VIEW_ITEM_FILESIZE+1)
	LD			E,(IY+VIEW_ITEM_FILESIZE+2)
	LD			D,(IY+VIEW_ITEM_FILESIZE+3)
	; DE:HL 32 FILE SIZE
	CALL		U32_TO_ASCII
	
	INC			DE
	LD			A,'0'
	LD			(DE),A
	DEC			DE
	
	LD			A,(IY+VIEW_ITEM_DATE+1)
	SRL			A
	ADD			A,80
	CP			100
	JP			M,.YEAR
	SUB			100
.YEAR:
	LD			L,A
	CALL		U8_TO_ASCII
	LD			A,'-'
	LD			(DE),A
	LD			A,'0'
	INC			DE
	LD			(DE),A
	DEC			DE
	
	LD			L,(IY+VIEW_ITEM_DATE)
	LD			H,(IY+VIEW_ITEM_DATE+1)

	SRA			H
	RR			L
	SRA			H
	RR			L
	SRA			H
	RR			L
	SRA			H
	RR			L
	SRA			H
	RR			L
	LD			A,L
	AND			00001111B
	LD			L,A
	CALL		U8_TO_ASCII
	LD			A,'-'
	LD			(DE),A
	LD			A,'0'
	INC			DE
	LD			(DE),A
	DEC			DE

	LD			A,(IY+VIEW_ITEM_DATE)
	AND			00011111B
	LD			L,A
	CALL		U8_TO_ASCII
	INC			DE

	LD			A,'0'
	LD			(DE),A
	DEC			DE

	LD			A,(IY+VIEW_ITEM_TIME+1)
	SRA			A
	SRA			A
	SRA			A
	AND			00011111B
	LD			L,A
	CALL		U8_TO_ASCII
	LD			A,':'
	LD			(DE),A
	INC			DE
	LD			A,'0'
	LD			(DE),A
	DEC			DE
	
	LD			L,(IY+VIEW_ITEM_TIME)
	LD			H,(IY+VIEW_ITEM_TIME+1)
	SRA			H
	RR			L
	SRA			H
	RR			L
	SRA			H
	RR			L
	SRA			H
	RR			L
	SRA			H
	RR			L
	LD			A,L
	AND			00011111B
	LD			L,A
	CALL		U8_TO_ASCII
	
	LD			C,0
	LD			A,(IY+VIEW_ITEM_SELECTED)
	OR			A
	JR			Z,.NOT_SELECTED
	LD			C,128
	LD			HL,TMP_STR
	LD			B,13
.LOOP_SEL:
	LD			A,(HL)
	OR			C
	LD			(HL),A
	INC			HL
	DJNZ		.LOOP_SEL	
.NOT_SELECTED:
	
	LD			C,(IY+VIEW_ITEM_ATTR)
	LD			L,(IY+WIN_NEXT)
	LD			H,(IY+WIN_NEXT+1)
	LD			A,(IY+WIN_NEXT+2)
	PUSH		HL
	POP			IY
	OR			A
	JR			Z,.NO_NEXT
	CALL		PUT_P2
	
.NO_NEXT:
	LD			HL,TMP_STR
	LD			B,38
	POP			DE
	RET
	
.BLANK_LINE:
	LD			HL,STR_VIEW_BODY
	LD			B,38
	LD			C,0
	RET

VIEW_ITEM_COMPARE_FIB:
	PUSH		HL
	PUSH		DE
	EXX
	POP			DE
	POP			HL
	LD			BC,14
	ADD			HL,BC
	LD			A,(HL)
	LD			B,A
	LD			HL,VIEW_ITEM_ATTR
	ADD			HL,DE
	LD			C,(HL)
	;BC = ATTRIBUTES
	BIT			DIR_BIT,B
	JR			Z,.FIB_NOT_DIR
	BIT			DIR_BIT,C
	JR			Z,.ITEM_NOT_DIR
	; BOTH DIRS, COMPARE STRINGS
	JP			.COMPARE_NAMES
.FIB_NOT_DIR:
	BIT			DIR_BIT,C
	JR			Z,.COMPARE_NAMES
	; FIB IS GREATER THAN ITEM
	EXX
	OR			A
	RET
.ITEM_NOT_DIR:
	; FIB LESSER THAN ITEM
	EXX
	SCF
	RET
.COMPARE_NAMES:
	EXX
	PUSH		HL
	INC			HL
	LD			HL,VIEW_ITEM_FILENAME
	ADD			HL,DE
	EX			DE,HL
	POP			HL
	PUSH		HL
	INC			HL
	LD			B,13
	CALL		STRLESS
	POP			HL
	RET		
	
VIEW_ITEM_INSERT_SORTED:
	LD			A,(TMP_PAGE)
	CALL		PUT_P2
	LD			IY,(TMP_VIEW)
	LD			E,(IY+WIN_CHILD)
	LD			D,(IY+WIN_CHILD+1)
	LD			A,(IY+WIN_CHILD+2)
	OR			A
	JR			Z,.ASCHILD
	CALL		PUT_P2
	PUSH		DE
	POP			IX
	CALL		VIEW_ITEM_COMPARE_FIB
	JR			NC,.NEXT
.ASCHILD:
	LD			A,(TMP_PAGE)
	CALL		PUT_P2

	LD			IY,(TMP_VIEW)
	LD			E,(IY+WIN_CHILD)
	LD			D,(IY+WIN_CHILD+1)
	LD			B,(IY+WIN_CHILD+2)	

	LD			HL,(TMP_ITEM)
	LD			(IY+WIN_CHILD),L
	LD			(IY+WIN_CHILD+1),H
	LD			A,(TMP_ITEM+2)
	LD			(IY+WIN_CHILD+2),A
	
	CALL		PUT_P2
	LD			IX,(TMP_ITEM)
	LD			(IX+WIN_NEXT),E
	LD			(IX+WIN_NEXT+1),D
	LD			(IX+WIN_NEXT+2),B
	
	RET
	
.NEXT:
	LD			(TMP_PREV),IX
	CALL		GET_P2
	LD			(TMP_PREV+2),A

	LD			E,(IX+WIN_NEXT)
	LD			D,(IX+WIN_NEXT+1)
	LD			A,(IX+WIN_NEXT+2)
	OR			A
	JR			Z,.INSERT
	
	CALL		PUT_P2
	PUSH		DE
	POP			IX	
	CALL		VIEW_ITEM_COMPARE_FIB
	JR			NC,.NEXT

.INSERT:
	LD			A,(TMP_PREV+2)
	CALL		PUT_P2
	LD			IX,(TMP_PREV)

	LD			E,(IX+WIN_NEXT)
	LD			D,(IX+WIN_NEXT+1)
	LD			B,(IX+WIN_NEXT+2)	

	LD			HL,(TMP_ITEM)
	LD			A,(TMP_ITEM+2)

	LD			(IX+WIN_NEXT),L
	LD			(IX+WIN_NEXT+1),H
	LD			(IX+WIN_NEXT+2),A
	CALL		PUT_P2

	LD			IY,(TMP_ITEM)
	LD			(IY+WIN_NEXT),E
	LD			(IY+WIN_NEXT+1),D
	LD			(IY+WIN_NEXT+2),B
	
	RET
	
VIEW_SORT:
	LD			(TMP_VIEW),IX
	CALL		GET_P2
	LD			(TMP_PAGE),A
	
	LD			L,(IX+WIN_CHILD)
	LD			H,(IX+WIN_CHILD+1)
	LD			A,(IX+WIN_CHILD+2)	
	OR			A
	RET			Z

	LD			(IX+WIN_CHILD),0
	LD			(IX+WIN_CHILD+1),0
	LD			(IX+WIN_CHILD+2),0

	PUSH		HL
	PUSH		AF
	LD			A,0
	LD			(FAST_DRAW),A
	LD			IX,SORTING_DIALOG
	CALL		WINDOW_OPEN
	CALL		FLUSH_SCREEN
	POP			AF
	POP			HL
		
.NEXT:
	CALL		CHECK_ESC_KEY
	JP			C,.ABORT 

	CALL		PUT_P2 ; 2ND CHILD
	LD			(TMP_ITEM),HL
	LD			(TMP_ITEM+2),A
	PUSH		HL
	POP			IX
	
	LD			E,(IX+WIN_NEXT)
	LD			D,(IX+WIN_NEXT+1)
	LD			A,(IX+WIN_NEXT+2)	
	PUSH		DE
	PUSH		AF

	LD			(IX+WIN_NEXT),0
	LD			(IX+WIN_NEXT+1),0
	LD			(IX+WIN_NEXT+2),0
	
	LD			DE,VIEW_ITEM_FILENAME
	ADD			HL,DE
	LD			DE,DOS_FIB+1
	LD			BC,14
	LDIR
	LD			HL,DOS_FIB	
	CALL		VIEW_ITEM_INSERT_SORTED
	
	POP			AF
	POP			HL
	OR			A
	JP			NZ,.NEXT
	JP			.EXIT
	
.ABORT:
	LD			IX,(TMP_VIEW)
	LD			A,1
	LD			(IX+VIEW_RESCAN),A

.EXIT:	
	LD			A,(PAGE2)
	CALL		PUT_P2
	PUSH		IX
	LD			IX,SORTING_DIALOG
	CALL		WINDOW_CLOSE
	POP			IX
	RET
	
	
VIEW_UPDATE:

	CP		UPDATE_EVENT
	JP		Z,.UPDATE
	CP		KEYPRESS_EVENT
	JP		Z,.KEYPRESS
	CP		ENTER_EVENT
	JP		Z,.ENTER_FOCUS
	CP		LCLICKPRESS_EVENT
	JP		Z,.LCLICK
	CP		LDCLICKPRESS_EVENT
	JP		Z,.LDCLICK
.EARLY_EXIT:
	OR		A
	RET
.LDCLICK:
	LD		A,E
	SUB		2
	JP		M,.EARLY_EXIT
	CP		17
	JP		P,.EARLY_EXIT
	JP		.EXEC
.LCLICK:

	PUSH	AF
	PUSH	DE
	CALL	GET_P2
	PUSH	AF
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	BIT		FOCUS_BIT,A
	JR		NZ,.FOCUSED
	PUSH	IX
	CALL	WINDOW_SET_FOCUS
	POP		IX
.FOCUSED:
	POP		AF
	CALL	PUT_P2
	POP		DE
	POP		AF
	
	LD		A,E
	SUB		2
	JP		M,.PAGE_UP
	CP		17
	JP		P,.PAGE_DOWN
	LD		E,A
	LD		D,0
	LD		L,(IX+VIEW_SCROLL)
	LD		H,(IX+VIEW_SCROLL+1)
	ADD		HL,DE
	EX		DE,HL
	LD		L,(IX+VIEW_NUM_FILES)
	LD		H,(IX+VIEW_NUM_FILES+1)
	AND		A
	SBC		HL,DE
	RET		C
	LD		(IX+VIEW_SELECTED),E
	LD		(IX+VIEW_SELECTED+1),D

	;LD		A,(IX+WIN_FLAGS)
	;SET		DIRTY_BIT,A
	;LD		(IX+WIN_FLAGS),A
	;BIT		FOCUS_BIT,A
	;JR		NZ,.FOCUSED
	;CALL	WINDOW_SET_FOCUS
;.FOCUSED:
	RET
.PAGE_DOWN:
	LD		A,1
	LD		(FAST_DRAW),A
	LD		L,(IX+VIEW_SCROLL)
	LD		H,(IX+VIEW_SCROLL+1)
	LD		DE,16
	ADD		HL,DE
	EX		DE,HL
	LD		L,(IX+VIEW_NUM_FILES)
	LD		H,(IX+VIEW_NUM_FILES+1)
	AND		A
	SBC		HL,DE
	JP		M,.MAX
	JR		Z,.MAX
	EX		DE,HL
	JP		.STORE
.MAX:
	LD		L,(IX+VIEW_NUM_FILES)
	LD		H,(IX+VIEW_NUM_FILES+1)
	DEC		HL
	JP		.STORE
.PAGE_UP:
	LD		A,1
	LD		(FAST_DRAW),A
	LD		L,(IX+VIEW_SCROLL)
	LD		H,(IX+VIEW_SCROLL+1)
	LD		DE,16
	AND		A
	SBC		HL,DE
	JP		M,.ZERO
	JR		.STORE
.ZERO:
	LD		HL,0
.STORE:
	LD		(IX+VIEW_SCROLL),L
	LD		(IX+VIEW_SCROLL+1),H
	LD		(IX+VIEW_SELECTED),L
	LD		(IX+VIEW_SELECTED+1),H
	LD		(IX+VIEW_SELECTED+1),H
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	SCF
	RET

.ENTER_FOCUS:

	LD		(CUR_VIEW),IX
	CALL	GET_P2
	LD		(CUR_VIEW+2),A

	LD		HL,(CUR_VIEW)
	LD		DE,LEFT_VIEW
	AND		A
	SBC		HL,DE
	JR		Z,.CUR_LEFT
	LD		HL,LEFT_VIEW
	JR		.CUR_CONT
.CUR_LEFT:
	LD		HL,RIGHT_VIEW
.CUR_CONT:
	LD		(OPP_VIEW),HL
	
	LD		A,(IX+VIEW_CUR_DRIVE)
	OR		A
	RET		Z
	DEC		A
	LD		C,_SELDSK
	LD		E,A
	CALL	DOS

	PUSH	IX
	CALL	UPDATE_CONSOLE_PATH
	POP		IX
		
	SCF
	RET
.KEYPRESS:

	PUSH	DE
	PUSH	IX
	LD		IX,CONSOLE_VIEW
	CALL	CONSOLE_UPDATE
	POP		IX
	POP		DE
	RET		C

	LD		A,E
	CP		$09 ; TAB KEY
	JP		Z,.GO_NEXT
	CP		$08 ; BACKSPACE
	JP		Z,.UPDIR
	CP		GKEY_UP
	JP		Z,.GO_UP
	CP		GKEY_DOWN
	JP		Z,.GO_DOWN
	CP		$0D
	JP		Z,.EXEC
	CP		$18
	JP		Z,.SELECT
	CP		'+'
	JP		Z,.SELECT_ALL
	CP		'-'
	JP		Z,.UNSELECT_ALL
	CP		'*'
	JP		Z,.INVERT_ALL
	OR		A
	RET
.INVERT_ALL:
	LD		A,0
	LD		(FAST_DRAW),A
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A

	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,(IX+WIN_CHILD+2)
	OR		A
	JP		Z,.SEL_ALL_OK
	CALL	PUT_P2	; FIRST
	PUSH	HL
	POP		IY
.INV_ALL_NEXT:
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	JR		NC,.INV_ALL_SKIP_PREV

	LD		A,(IY+VIEW_ITEM_SELECTED)
	CPL
	LD		(IY+VIEW_ITEM_SELECTED),A
.INV_ALL_SKIP_PREV:

	LD		L,(IY+WIN_NEXT)
	LD		H,(IY+WIN_NEXT+1)
	LD		A,(IY+WIN_NEXT+2)
	OR		A
	JP		Z,.SEL_ALL_OK
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	JR		.INV_ALL_NEXT
.UNSELECT_ALL:
	LD		A,0
	LD		(FAST_DRAW),A
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A

	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,(IX+WIN_CHILD+2)
	OR		A
	JP		Z,.SEL_ALL_OK
	CALL	PUT_P2	; FIRST
	PUSH	HL
	POP		IY
.UNSEL_ALL_NEXT:
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	JR		NC,.UNSEL_ALL_SKIP_PREV

	XOR		A
	LD		(IY+VIEW_ITEM_SELECTED),A
.UNSEL_ALL_SKIP_PREV:

	LD		L,(IY+WIN_NEXT)
	LD		H,(IY+WIN_NEXT+1)
	LD		A,(IY+WIN_NEXT+2)
	OR		A
	JP		Z,.SEL_ALL_OK
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	JR		.UNSEL_ALL_NEXT
.SELECT_ALL:
	LD		A,0
	LD		(FAST_DRAW),A
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A

	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,(IX+WIN_CHILD+2)
	OR		A
	JP		Z,.SEL_ALL_OK
	CALL	PUT_P2	; FIRST
	PUSH	HL
	POP		IY
.SEL_ALL_NEXT:
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	JR		NC,.SEL_ALL_SKIP_PREV

	LD		A,$FF
	LD		(IY+VIEW_ITEM_SELECTED),A
.SEL_ALL_SKIP_PREV:
	LD		L,(IY+WIN_NEXT)
	LD		H,(IY+WIN_NEXT+1)
	LD		A,(IY+WIN_NEXT+2)
	OR		A
	JP		Z,.SEL_ALL_OK
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	JR		.SEL_ALL_NEXT
.SEL_ALL_OK:
	SCF
	RET
	
.SELECT:
	DI
	LD		A,1
	LD		(FAST_DRAW),A
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A

	CALL	VIEW_FIND_SELECTED_ITEM
	RET		NC
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	RET		NC

	LD		A,(IY+VIEW_ITEM_SELECTED)
	CPL
	LD		(IY+VIEW_ITEM_SELECTED),A
	CALL		.GO_DOWN
	SCF
	RET

.UPDIR:
	LD		A,KEY_CTRL
	CALL	KEY_IS_PRESSED
	RET		NC
	
	LD		DE,STR_PREV_DIR
	LD		C,_CHDIR
	CALL	DOS
	
	LD		A,(IX+WIN_ATTR)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_ATTR),A
	
	LD		A,1
	LD		(IX+VIEW_RESCAN),A
	XOR		A
	LD		(IX+VIEW_CUR_PATH),A
	LD		(IX+VIEW_SELECTED),A
	LD		(IX+VIEW_SELECTED+1),A
	LD		(IX+VIEW_SCROLL),A
	LD		(IX+VIEW_SCROLL+1),A
	
	SCF
	RET
	
.EXEC:

	CALL	FLUSH_SCREEN

	CALL	GET_P2
	EX		AF,AF'
	
	LD		DE,DOS_CUR_PATH
	PUSH	IX
	POP		HL
	LD		BC,VIEW_CUR_PATH
	ADD		HL,BC
	LD		BC,67
	LDIR ; COPY CURRENT DIR

	LD		A,(IX+VIEW_CUR_DRIVE)
	OR		A
	RET		Z
	DEC		A
	LD		C,_SELDSK
	LD		E,A
	CALL	DOS

	LD		DE,DOS_CUR_PATH
	LD		C,_CHDIR
	CALL	DOS
	
	CALL	VIEW_FIND_SELECTED_ITEM
	RET		NC
	
	LD		HL,DOS_CUR_PATH
	CALL	STRLEN
	LD		D,0
	LD		E,B
	ADD		HL,DE
	EX		DE,HL
	PUSH	IY
	POP		HL
	LD		BC,VIEW_ITEM_FILENAME
	ADD		HL,BC
	LD		BC,13
	LDIR

	LD		A,(IY+VIEW_ITEM_ATTR)
	BIT		DIR_BIT,A
	JR		NZ,.CHDIR

	EX		AF,AF'
	CALL	PUT_P2
	
	XOR		A
	LD		(CONSOLE_VIEW+CONSOLE_PATH),A
	
	LD		HL,DOS_CUR_PATH
	LD		DE,SHELL_PARAMS
	LD		BC,TEXT_BOX_TEXT_SIZE+1
	LDIR
	JP		MC_EXEC
	;SCF
	;RET	
.CHDIR:
	
	EX		AF,AF'
	CALL	PUT_P2
	
	LD		HL,DOS_CUR_PATH
	CALL	STRLEN
	LD		A,B
	CP		54
	JP		M,.PATH_OK
	DEC		BC
	LD		D,0
	LD		E,B
	ADD		HL,DE
	LD		A,(HL)
	CP		'.'
	JR		Z,.PATH_OK
	
	LD		B,(IX+VIEW_CUR_DRIVE)
	LD		HL,STR_PATHNAME_TOO_LONG
	CALL	ERROR_MESSAGE
	SCF
	RET
	
.PATH_OK:

	LD		A,KEY_CTRL
	CALL	KEY_IS_PRESSED
	JR		NC,.THIS_VIEW
	LD		A,(IX+VIEW_CUR_DRIVE)
	LD		IX,(OPP_VIEW)
	LD		(IX+VIEW_CUR_DRIVE),A
	LD		HL,(OPP_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	EX		DE,HL
	LD		HL,DOS_CUR_PATH
	CALL	STRCPY
	LD		HL,STR_BACKSLASH
	CALL	STRCAT
	PUSH	IX
	CALL	WINDOW_SET_FOCUS
	POP		IX
	
.THIS_VIEW:

	CALL	VIEW_SET_PREV_DIR

	LD		DE,DOS_CUR_PATH
	LD		C,_CHDIR
	CALL	DOS
	
	LD		A,(IX+WIN_ATTR)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_ATTR),A
	
	LD		A,1
	LD		(IX+VIEW_RESCAN),A
	XOR		A
	LD		(IX+VIEW_CUR_PATH),A
	LD		(IX+VIEW_SELECTED),A
	LD		(IX+VIEW_SELECTED+1),A
	LD		(IX+VIEW_SCROLL),A
	LD		(IX+VIEW_SCROLL+1),A
	

	
	SCF
	RET
	
.GO_DOWN:
	DI
	LD		A,1
	LD		(FAST_DRAW),A
	LD		A,KEY_CTRL
	CALL	KEY_IS_PRESSED
	JP		C,.PAGE_DOWN

	LD		E,(IX+VIEW_SELECTED)
	LD		D,(IX+VIEW_SELECTED+1)
	INC		DE
	LD		L,(IX+VIEW_NUM_FILES)
	LD		H,(IX+VIEW_NUM_FILES+1)
	DEC		HL
	OR		A
	SBC		HL,DE
	RET		M
	LD		(IX+VIEW_SELECTED),E
	LD		(IX+VIEW_SELECTED+1),D
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	
	EX		DE,HL ; HL = SELECTED
	LD		B,H
	LD		C,L
	LD		E,(IX+VIEW_SCROLL)
	LD		D,(IX+VIEW_SCROLL+1)
	OR		A
	SBC		HL,DE
	LD		A,L
	CP		16
	JP		P,.SCROLL_DOWN
	SCF
	RET
.SCROLL_DOWN:
	LD		A,1
	LD		(FAST_DRAW),A

	LD		HL,-16
	ADD		HL,BC
	LD		(IX+VIEW_SCROLL),L
	LD		(IX+VIEW_SCROLL+1),H
	SCF
	RET
	
.GO_UP:
	DI
	LD		A,1
	LD		(FAST_DRAW),A
	LD		A,KEY_CTRL
	CALL	KEY_IS_PRESSED
	JP		C,.PAGE_UP
	
	LD		E,(IX+VIEW_SELECTED)
	LD		D,(IX+VIEW_SELECTED+1)
	LD		A,E
	OR		D
	RET		Z
	DEC		DE
	LD		(IX+VIEW_SELECTED),E
	LD		(IX+VIEW_SELECTED+1),D
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	
	EX		DE,HL
	LD		E,(IX+VIEW_SCROLL)
	LD		D,(IX+VIEW_SCROLL+1)
	OR		A
	SBC		HL,DE
	JP		M,.SCROLL_UP
	SCF
	RET
.SCROLL_UP:
	LD		A,1
	LD		(FAST_DRAW),A
	ADD		HL,DE
	LD		(IX+VIEW_SCROLL),L
	LD		(IX+VIEW_SCROLL+1),H
	SCF
	RET	
	
.GO_NEXT:
	LD		A,KEY_CTRL
	CALL	KEY_IS_PRESSED
	JR		NC,.TAB
	OR		A
	RET
.TAB:
	LD		A,(IX+WIN_FLAGS)
	RES		FOCUS_BIT,A
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A

	LD		L,(IX+WIN_PREV)
	LD		H,(IX+WIN_PREV+1)
	LD		A,(IX+WIN_PREV+2)
	CALL	PUT_P2
	PUSH	HL
	POP		IX
	CALL	WINDOW_SET_FOCUS
	
	SCF
	RET
	
.UPDATE:	
	
	LD		(TMP_PARENT_WINDOW),IX
	
	LD		A,(IX+VIEW_RESCAN)
	OR		A
	RET		Z
.RESCAN:

	XOR		A
	LD		(FAST_DRAW),A

	PUSH	IX ; SAVE PARENT
	CALL	GET_P2
	LD		(TMP_PAGE),A	
	PUSH	AF
	
	LD		(TMP_VIEW),IX
	
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A

	LD		A,(FOCUS_WINDOW+2)
	OR		A
	JR		Z,.NO_FOCUS
	PUSH	IX
	LD		IX,(FOCUS_WINDOW)
	CALL	PUT_P2
	CALL	WINDOW_SET_DIRTY
	LD		A,(TMP_PAGE)
	CALL	PUT_P2
	POP		IX
.NO_FOCUS:
	
	PUSH	IX
	CALL	VIEW_ITEM_CLEAR
	CALL	MALLOC_COALESCE
	POP		IX
	LD		A,(TMP_PAGE)
	CALL	PUT_P2	
	
	XOR		A
	LD		(IX+VIEW_RESCAN),A

	PUSH	IX
	POP		HL
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH2
	CALL	STRCPY
	
	LD		A,(IX+VIEW_CUR_DRIVE)
	OR		A
	JR		NZ,.GET_PATH
	
	LD		C,_CURDRV
	CALL	DOS
	
	INC		A
	LD		(IX+VIEW_CUR_DRIVE),A

	XOR		A
	LD		(IX+VIEW_CUR_PATH),A
	
.GET_PATH:	
	PUSH	IX
	POP		HL
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE	
	
	LD		A,(HL)
	OR		A
	JP		NZ,.SKIP_CD
		
	LD		A,(IX+VIEW_CUR_DRIVE)
	LD		B,A
	ADD		A,'@'
	LD		(HL),A
	INC		HL
	LD		(HL),':'
	INC		HL
	LD		(HL),0
	
.GETCD:	
	PUSH	HL
	LD		DE,DOS_CUR_PATH
	LD		C,_GETCD
	CALL	DOS	
	POP		HL
	OR		A	
	JP		NZ,.ERROR
	
	LD		(HL),'\'
	INC		HL
	LD		(HL),0

	LD		DE,DOS_CUR_PATH	
.COPY_PATH:
	LD		A,(DE)
	LD		(HL),A
	OR		A
	JR		Z,.END_COPY
	INC		DE
	INC		HL
	JR		.COPY_PATH
.END_COPY:
	DEC		HL
	LD		A,(HL)
	CP		'\'
	JR		Z,.HAS_SLASH
	INC		HL
	LD		(HL),'\'
	INC		HL
	LD		(HL),0
.HAS_SLASH:

	PUSH	IX
	POP		HL
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH2
	CALL	STRLEN
	INC		B
	CALL	STRNCMP
	JR		NC,.SKIP_CD

	XOR		A
	LD		(IX+VIEW_SELECTED),A
	LD		(IX+VIEW_SELECTED+1),A
	LD		(IX+VIEW_SCROLL),A
	LD		(IX+VIEW_SCROLL+1),A

.SKIP_CD:
	
	XOR		A
	LD		(IX+VIEW_NUM_FILES),A
	LD		(IX+VIEW_NUM_FILES+1),A
	LD		(IX+VIEW_FILESIZE),A
	LD		(IX+VIEW_FILESIZE+1),A
	LD		(IX+VIEW_FILESIZE+2),A
	LD		(IX+VIEW_FILESIZE+3),A

	LD		(NUM_FILES),A
	LD		(NUM_FILES+1),A
	LD		(FILESIZE),A
	LD		(FILESIZE+1),A
	LD		(FILESIZE+2),A
	LD		(FILESIZE+3),A
	
	XOR		A
	LD		(IX+VIEW_VOLUME),A
	
	CALL	FLUSH_SCREEN		

	PUSH	IX
	POP		HL
	PUSH	HL
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	LD		BC,64
	LDIR
	LD		DE,DOS_CUR_PATH

	POP		HL
	PUSH	HL
	LD		DE,VIEW_FILTER
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCAT
	
	POP		HL
	LD		DE,VIEW_PREV_DIR
	ADD		HL,DE
	LD		BC,13
	LD		DE,PREV_DIR
	LDIR
	
	LD		A,(FOCUS_WINDOW+2)
	LD		B,A
	CALL	GET_P2
	CP		B
	JR		NZ,.NON_SEL
	LD		HL,(FOCUS_WINDOW)
	PUSH	IX
	POP		DE
	AND		A
	SBC		HL,DE
	JR		Z,.UPDATE_PATH
	JR		.NON_SEL
.UPDATE_PATH:
	PUSH	IX
	CALL	UPDATE_CONSOLE_PATH
	POP		IX
	
.NON_SEL:
			
.FFIRST:
	PUSH	IX
	POP		IY	; PARENT VIEW

	LD		DE,DOS_CUR_PATH
	LD		B,VLABEL_FLAG
	LD		C,_FFIRST
	LD		IX,DOS_FIB
	CALL	DOS
	CP		ERR_NOFIL
	JR		Z,.NO_VOL

	OR		A	
	JP		NZ,.ERROR

	PUSH	IY
	POP		HL
	LD		DE,VIEW_VOLUME
	ADD		HL,DE
	EX		DE,HL
	LD		HL,DOS_FIB+1
	CALL	STRCPY
.NO_VOL:
	LD		DE,DOS_CUR_PATH
	LD		B,DIR_FLAG | HIDDEN_FLAG | SYSTEM_FLAG
	LD		C,_FFIRST
	LD		IX,DOS_FIB
	CALL	DOS

	OR		A
	JP		NZ,.ERROR

	LD		HL,DOS_FIB+1
	LD		DE,STR_THIS_DIR
	LD		B,2
	CALL	STRNCMP
	JR		C,.NOT_THIS_DIR

	LD		C,_FNEXT
	LD		IX,DOS_FIB
	CALL	DOS
	
	OR		A
	JP		NZ,.ERROR

.NOT_THIS_DIR:

	LD		BC,VIEW_ITEM_SIZE
	CALL	VIEW_MALLOC
	PUSH	AF
	PUSH	HL
	LD		BC,VIEW_ITEM_SIZE
	CALL	ZERO_FILL
	POP		HL
	POP		AF

	PUSH	AF
	PUSH	HL ; SAVE CHILD ADDR
	
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	EX		DE,HL
	LD		BC,18 ; FILENAME + ATTR + TIME + DATE
	LD		HL,DOS_FIB+1
	LDIR	
	INC		HL
	INC		HL	; FIB FILESIZE
	LD		BC,4
	LDIR
	
	LD		BC,0
	LD		(CUR_ITEM),BC
		
	POP		HL
	POP		BC
	
	POP		AF
	CALL	PUT_P2	; PUT PARENT PAGE BACK

	PUSH	AF ; SAVE PARENT PAGE

	LD		(IY+WIN_CHILD),L
	LD		(IY+WIN_CHILD+1),H
	LD		(IY+WIN_CHILD+2),B
	
	PUSH	HL
	POP		IY	; FIRST ENTRY
	LD		A,B
	CALL	PUT_P2 ; PUT CHILD PAGE ON

	LD		HL,(NUM_FILES)
	INC		HL
	LD		(NUM_FILES),HL
	
	LD		HL,(FILESIZE)
	LD		E,(IY+VIEW_ITEM_FILESIZE)
	LD		D,(IY+VIEW_ITEM_FILESIZE+1)
	ADD		HL,DE
	LD		(FILESIZE),HL
	LD		HL,(FILESIZE+2)
	LD		E,(IY+VIEW_ITEM_FILESIZE+2)
	LD		D,(IY+VIEW_ITEM_FILESIZE+3)
	ADC		HL,DE
	LD		(FILESIZE+2),HL
	
.FNEXT:

	LD		BC,(CUR_ITEM)
	INC		BC
	LD		(CUR_ITEM),BC

	LD		C,_FNEXT
	LD		IX,DOS_FIB
	CALL	DOS
	OR		A
	JP		NZ,.ERROR
	
	CALL	GET_P2
	PUSH	AF ; SAVE PREVIOUS PAGE
	LD		BC,VIEW_ITEM_SIZE
	CALL	VIEW_MALLOC
	PUSH	AF
	PUSH	HL
	LD		BC,VIEW_ITEM_SIZE
	CALL	ZERO_FILL
	POP		HL
	POP		AF

	EX		AF,AF'
	LD		A,H
	OR		L
	JP		Z,.ERROR
	EX		AF,AF'
	
	PUSH	AF
	PUSH	HL ; SAVE CHILD ADDR

	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	PUSH	HL
	EX		DE,HL
	LD		BC,18 ; FILENAME + ATTR + TIME + DATE
	LD		HL,DOS_FIB+1
	LDIR	
	INC		HL
	INC		HL	; FIB FILESIZE
	LD		BC,4
	LDIR
.CMP_PREV:
	POP		HL
	LD		DE,PREV_DIR
	CALL	STRLEN
	INC		B
	CALL	STRNCMP
	JR		C,.NOT_PREV2
	
	CALL	GET_P2
	PUSH	AF
	LD		A,(TMP_PAGE)
	CALL	PUT_P2
	LD		BC,(CUR_ITEM)
	PUSH	IX
	LD		IX,(TMP_VIEW)
	LD		(IX+VIEW_SELECTED),C
	LD		(IX+VIEW_SELECTED+1),B

	PUSH	HL
	LD		H,B
	LD		L,C
	LD		DE,8
	AND		A
	SBC		HL,DE
	JR		C,.LESS_THAN8
	LD		(IX+VIEW_SCROLL),L
	LD		(IX+VIEW_SCROLL+1),H
	JR		.CONT_PREV
.LESS_THAN8:
	LD		(IX+VIEW_SCROLL),0
	LD		(IX+VIEW_SCROLL+1),0
.CONT_PREV:
	POP		HL
	POP		IX
	POP		AF
	CALL	PUT_P2
.NOT_PREV2:
	
	POP		HL ; RESTORE CHILD ADDR
	POP		BC ; RESTORE CHILD PAGE
	
	POP		AF
	CALL	PUT_P2	; PUT PREVIOUS PAGE BACK
	LD		(IY+WIN_NEXT),L
	LD		(IY+WIN_NEXT+1),H
	LD		(IY+WIN_NEXT+2),B
	EX		AF,AF'
	LD		A,B
	CALL	PUT_P2	; PUT NEXT PAGE BACK	
	PUSH	IY
	POP		DE
	PUSH	HL
	POP		IY
	EX		AF,AF'
	LD		B,A

	LD		HL,(NUM_FILES)
	INC		HL
	LD		(NUM_FILES),HL
	
	LD		HL,(FILESIZE)
	LD		E,(IY+VIEW_ITEM_FILESIZE)
	LD		D,(IY+VIEW_ITEM_FILESIZE+1)
	ADD		HL,DE
	LD		(FILESIZE),HL
	LD		HL,(FILESIZE+2)
	LD		E,(IY+VIEW_ITEM_FILESIZE+2)
	LD		D,(IY+VIEW_ITEM_FILESIZE+3)
	ADC		HL,DE
	LD		(FILESIZE+2),HL
	JP		.FNEXT
	
.ERROR:
	POP		AF
	CALL	PUT_P2
	POP		IX
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		HL,(NUM_FILES)
	LD		(IX+VIEW_NUM_FILES),L
	LD		(IX+VIEW_NUM_FILES+1),H

	LD		HL,(FILESIZE)
	LD		(IX+VIEW_FILESIZE),L
	LD		(IX+VIEW_FILESIZE+1),H
	LD		HL,(FILESIZE+2)
	LD		(IX+VIEW_FILESIZE+2),L
	LD		(IX+VIEW_FILESIZE+3),H

	XOR		A
	LD		(IX+VIEW_PREV_DIR),A
	
	LD		E,(IX+VIEW_SELECTED)
	LD		D,(IX+VIEW_SELECTED+1)
	LD		HL,(NUM_FILES)
	DEC		HL
	AND		A
	SBC		HL,DE
	JR		NC,.OK_NUM
	
	LD		HL,(NUM_FILES)
	DEC		HL
	LD		(IX+VIEW_SELECTED),L
	LD		(IX+VIEW_SELECTED+1),H
	LD		(IX+VIEW_SCROLL),L
	LD		(IX+VIEW_SCROLL+1),H

.OK_NUM:
	
	LD		A,(FOCUS_WINDOW+2)
	OR		A
	JR		Z,.NO_FOCUS2
	LD		IX,(FOCUS_WINDOW)
	CALL	PUT_P2
	CALL	WINDOW_SET_DIRTY
	LD		A,(TMP_PAGE)
	CALL	PUT_P2
.NO_FOCUS2:
	
	SCF
	RET
	
VIEW_ITEM_CLEAR:
	XOR		A
	LD		(VIEW_MAL_PAGE),A
	LD		HL,0
	LD		(VIEW_MAL_TOP),HL
	LD		(VIEW_MAL_ADDR),HL

	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,L
	OR		H
	RET		Z
	LD		A,(IX+WIN_CHILD+2)
	EX		AF,AF'
	XOR		A
	LD		(IX+WIN_CHILD),A
	LD		(IX+WIN_CHILD+1),A
	LD		(IX+WIN_CHILD+2),A
	EX		AF,AF'
	CALL	PUT_P2
.NEXT:
	PUSH	HL
	POP		IX
	LD		E,(IX+WIN_NEXT)
	LD		D,(IX+WIN_NEXT+1)
	LD		B,(IX+WIN_NEXT+2)
	PUSH	BC
	PUSH	DE
	
	CALL	VIEW_FREE
	
	POP		HL
	POP		BC
	LD		A,H
	OR		L
	RET		Z
	LD		A,B
	CALL	PUT_P2
	JP		.NEXT
	
VIEW_RESCAN_ALL:
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		A,0
	LD		IX,(CUR_VIEW)
	LD		(IX+VIEW_CUR_DRIVE),A
	LD		A,1
	LD		(IX+VIEW_RESCAN),A
	LD		IX,(OPP_VIEW)
	LD		(IX+VIEW_RESCAN),A
	RET
	
FLUSH_SCREEN:
	PUSH	AF
	CALL	GET_P2
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY
	EXX
	PUSH	BC
	PUSH	DE
	PUSH	HL
	EX		AF,AF'
	PUSH	AF
	CALL	MC_DRAW
	POP		AF
	EX		AF,AF'
	POP		HL
	POP		DE
	POP		BC
	EXX
	POP		IY
	POP		IX
	POP		HL
	POP		DE
	POP		BC
	POP		AF
	CALL	PUT_P2
	POP		AF
RET

UPDATE_CONSOLE_PATH:
	PUSH	IX
	POP		HL
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	CALL	STRLEN
	LD		DE,CONSOLE_VIEW+CONSOLE_PATH
	CALL	STRCPY
	;PUSH	BC
	;LD		BC,67
	;LDIR
	;POP		BC
	LD		IY,CONSOLE_VIEW
	LD		A,(IY+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IY+WIN_FLAGS),A
	LD		IX,CONSOLE_INPUT
	LD		(IX+AREA_P0+PX),B
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	CALL	TEXT_BOX_UPDATE.FULL
	RET
	
COUNT_DIR_LEVEL:
	PUSH	AF
	PUSH	HL
	LD		B,0
.LOOP:
	LD		A,(HL)
	INC		HL
	CP		'\'
	JR		NZ,.SKIP
	INC		B
.SKIP:
	OR		A
	JR		NZ,.LOOP
	POP		HL
	POP		AF
	RET

VIEW_SET_PREV_DIR:

	LD		(IX+VIEW_PREV_DIR),0
	
	LD		HL,DOS_CUR_PATH
	CALL	STRLEN
	DEC		B
	DEC		B
	
	LD		A,L
	ADD		A,B
	LD		L,A
	LD		A,0
	ADC		A,H
	LD		H,A
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	RET		C
	
	LD		HL,DOS_CUR_PATH
	CALL	STRLEN
	LD		A,L
	ADD		A,B
	LD		L,A
	LD		A,0
	ADC		A,H
	LD		H,A
	
.FIRST_S:
	LD		A,(HL)
	DEC		HL
	CP		':'
	RET		Z
	CP		'\'
	JR		NZ,.FIRST_S
	LD		D,H
	LD		E,L
	
.SEC_S:
	LD		A,(HL)
	DEC		HL
	CP		':'
	RET		Z
	CP		'\'
	JR		NZ,.SEC_S
	
	INC		HL
	
	PUSH	HL
	PUSH	IX
	POP		HL
	LD		DE,VIEW_PREV_DIR
	ADD		HL,DE
	EX		DE,HL
	POP		HL
	
.COPY:
	INC		HL
	LD		A,(HL)
	LD		(DE),A
	INC		DE
	CP		'\'
	JR		NZ,.COPY
	DEC		DE
	XOR		A
	LD		(DE),A
	
	RET
	
VIEW_FIND_SELECTED_ITEM:
	LD		HL,0
	PUSH	HL
	POP		IY
	
	LD		C,(IX+VIEW_SELECTED)
	LD		B,(IX+VIEW_SELECTED+1)

	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,(IX+WIN_CHILD+2)
	OR		A
	RET		Z
	
	CALL	PUT_P2	; FIRST
	PUSH	HL
	POP		IY
	LD		A,B
	OR		C
	JR		Z,.FOUND
.NEXT:
	LD		L,(IY+WIN_NEXT)
	LD		H,(IY+WIN_NEXT+1)
	LD		A,(IY+WIN_NEXT+2)
	OR		A
	RET		Z
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	DEC		BC
	LD		A,B
	OR		C
	JR		NZ,.NEXT
.FOUND:
	SCF
	RET

VIEW_MALLOC:
	JP		MALLOC

VIEW_FREE:
	JP		FREE
	
VIEW_COUNT_SELECTED:
	LD		DE,0
	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,(IX+WIN_CHILD+2)
	OR		A
	RET		Z
	
	CALL	PUT_P2	; FIRST
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT
	INC		DE
.NEXT:
	LD		L,(IY+WIN_NEXT)
	LD		H,(IY+WIN_NEXT+1)
	LD		A,(IY+WIN_NEXT+2)
	OR		A
	RET		Z
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT
	INC		DE
	JR		.NEXT
	
VIEW_OPEN_USER_DLG:
	XOR		A
	LD		(MENU_SELECTED_ITEM),A
	LD		(MENU_SCROLL_ITEM),A
	LD		IX,USER_DIALOG
	CALL	WINDOW_OPEN
	RET	
	
VIEW_OPEN_DELETE_DLG:
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	
	LD		HL,STR_NUMBER_U16
	LD		DE,TMP_STR
	CALL	STRCPY
	
	CALL	VIEW_COUNT_SELECTED
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	EX		DE,HL
	
	LD		A,H
	OR		L
	JR		Z,.NO_SEL
	
	PUSH	IX
	LD		IX,PROGRESS_PG
	LD		(IX+PROGRESS_BAR_MAX),L
	LD		(IX+PROGRESS_BAR_MAX+1),H
	XOR		A
	LD		(IX+PROGRESS_BAR_CUR),A
	LD		(IX+PROGRESS_BAR_CUR+1),A
	LD		(PROGRESS_STR),A
	LD		(RO_ALL),A
	LD		(OVERWRITE_ALL),A
	
	POP		IX
	
	LD		DE,TMP_STR
	CALL	U16_TO_ASCII
	
	LD		DE,STR_CONFIRM_MSG
	LD		HL,STR_DELETE_MSG
	CALL	STRCPY
	
	LD		HL,TMP_STR
	CALL	STRCAT_NOLEADSPACE
	
	LD		HL,STR_DELETE_FILES
	CALL	STRCAT
	JP		.SHOW
	
.NO_SEL:
	PUSH	IX
	LD		IX,PROGRESS_PG
	LD		(IX+PROGRESS_BAR_MAX),1
	LD		(IX+PROGRESS_BAR_MAX+1),0
	XOR		A
	LD		(IX+PROGRESS_BAR_CUR),A
	LD		(IX+PROGRESS_BAR_CUR+1),A
	LD		(PROGRESS_STR),A
	LD		(RO_ALL),A
	LD		(OVERWRITE_ALL),A
	POP		IX

	LD		DE,STR_CONFIRM_MSG
	LD		HL,STR_DELETE_MSG
	CALL	STRCPY

	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,STR_CONFIRM_MSG
	CALL	STRCAT	
	
	CALL	VIEW_FIND_SELECTED_ITEM
	
	PUSH	IY
	POP		HL
	LD		A,H
	OR		L
	RET		Z
	
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	RET		NC
	
	LD		DE,STR_CONFIRM_MSG
	CALL	STRCAT
	
	
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		DE,STR_CONFIRM_MSG;
	LD		HL,STR_QUESTION
	CALL	STRCAT
	
	
.SHOW:
	LD		IX,CONFIRM_MSG
	WIN_SETLABEL	STR_CONFIRM_MSG

.CENTER:
	LD		HL,STR_CONFIRM_MSG
	CALL	STRLEN
	LD		IY,CONFIRM_DIALOG
	LD		A,(IY+AREA_P1+PX)
	LD		D,(IY+AREA_P0+PX)
	SUB		D
	SUB		B
	SRA		A
	LD		(IX+AREA_P0+PX),A
		
	LD		IX,CONFIRM_DIALOG
	WIN_SETUPDATE_F	WINDOW_UPDATE_DELETE_DLG
	WIN_SETLABEL	STR_DELETE_MSG	
	
	CALL	WINDOW_OPEN

	RET
	
VIEW_DELETE_FILES:
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	
	CALL	VIEW_COUNT_SELECTED
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	EX		DE,HL
	
	LD		A,H
	OR		L
	JR		Z,.NO_SEL

	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	WIN_SETLABEL	STR_DELETE_MSG	
	CALL	WINDOW_OPEN
	POP		IX
	
	LD		A,1
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	
	LD		HL,0
	LD		(DELETED_FILES),HL
	
	CALL	DELETE_SELECTED_FILES

	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	
	LD		HL,(DELETED_FILES)
	LD		A,H
	OR		L
	JR		Z,.SKIP_RESCAN
	LD		A,1
	LD		(IX+VIEW_RESCAN),A
.SKIP_RESCAN:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	CALL	WINDOW_CLOSE
	POP		IX
	
	LD		A,0
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN

	RET
	
.NO_SEL:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	WIN_SETLABEL	STR_DELETE_MSG	
	CALL	WINDOW_OPEN
	POP		IX
	
	CALL	VIEW_FIND_SELECTED_ITEM
	
	LD		A,1
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	
	LD		HL,0
	LD		(DELETED_FILES),HL

	CALL	VIEW_DELETE_FILE

	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)

	LD		HL,(DELETED_FILES)
	LD		A,H
	OR		L
	JR		Z,.SKIP_RESCAN2
	LD		A,1
	LD		(IX+VIEW_RESCAN),A
.SKIP_RESCAN2:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	CALL	WINDOW_CLOSE
	POP		IX

	RET
	
DELETE_SELECTED_FILES:
	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,(IX+WIN_CHILD+2)
	OR		A
	RET		Z
	
	CALL	PUT_P2	; FIRST
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT

	CALL	VIEW_DELETE_FILE
	RET		C
	
.NEXT:
	LD		L,(IY+WIN_NEXT)
	LD		H,(IY+WIN_NEXT+1)
	LD		A,(IY+WIN_NEXT+2)
	OR		A
	RET		Z
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT
	CALL	VIEW_DELETE_FILE
	RET		C
	
	JR		.NEXT
	RET
	
UPDATE_PG_MSG:
	PUSH	AF
	PUSH	BC
	PUSH	HL
	CALL	GET_P2
	PUSH	AF
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		HL,(PROGRESS_MSG+WIN_LABEL)
	CALL	STRLEN
	LD		C,B
	LD		B,0
	ADD		HL,BC
	LD		A,C
	AND		00111111B
	LD		C,A
	LD		A,63
	SUB		C
	LD		B,A
	LD		A,' '
.LOOP:
	LD		(HL),A
	INC		HL
	DJNZ	.LOOP
	XOR		A
	LD		(HL),A
	
	LD		A,(PROGRESS_MSG+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(PROGRESS_MSG+WIN_FLAGS),A

	LD		A,1
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	POP		AF
	CALL	PUT_P2
	POP		HL
	POP		BC
	POP		AF
	RET
	

UPDATE_PG:	
	
	PUSH	AF
	PUSH	HL
	CALL	GET_P2
	PUSH	AF
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,(PROGRESS_PG+PROGRESS_BAR_CUR)
	INC		HL
	LD		(PROGRESS_PG+PROGRESS_BAR_CUR),HL
	LD		A,(PROGRESS_PG+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(PROGRESS_PG+WIN_FLAGS),A
	LD		A,1
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	POP		AF
	CALL	PUT_P2
	POP		HL
	POP		AF
	RET

INC_PG:	
	PUSH	AF
	PUSH	HL
	CALL	GET_P2
	PUSH	AF
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,(PROGRESS_PG+PROGRESS_BAR_MAX)
	INC		HL
	LD		(PROGRESS_PG+PROGRESS_BAR_MAX),HL
	LD		A,(PROGRESS_PG+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(PROGRESS_PG+WIN_FLAGS),A
	LD		A,1
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	POP		AF
	CALL	PUT_P2
	POP		HL
	POP		AF
	RET

	
VIEW_DELETE_FILE:
	
	CALL	GET_P2
	PUSH	AF
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)

	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
	POP		AF
	CALL	PUT_P2
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCAT
	
	PUSH	IX
	PUSH	IY
	LD		HL,0
	ADD		HL,SP
	LD		DE,-67
	ADD		HL,DE
	LD		SP,HL	
	EX		DE,HL
	LD		HL,DOS_CUR_PATH
	LD		BC,67
	LDIR
	
	CALL	DELETE_FILE_RECURSIVE
	EX		AF,AF'
	
	LD		HL,0
	ADD		HL,SP
	LD		DE,67
	ADD		HL,DE
	LD		SP,HL
	POP		IY
	POP		IX
	EX		AF,AF'
	RET
	
DELETE_FILE_RECURSIVE:

	LD		HL,0
	ADD		HL,SP
	PUSH	HL
	POP		IY ; IY = STACK
	INC		HL
	INC		HL

	LD		D,H
	LD		E,L
	CALL	STRLEN
	LD		C,B
	LD		B,0
	ADD		HL,BC ; PATH END
	
.FILENAME:
	DEC		HL
	LD		A,(HL)
	CP		'\'
	JR		NZ,.FILENAME
.FILENAME_START:
	INC		HL	
	PUSH	DE ; PATH (YI-2)
	PUSH	HL ; FILENAME (YI-4)

	LD		C,_ATTR
	LD		A,0
	CALL	DOS
	OR		A
	JP		NZ,.ERROR_PREPARE

	BIT		DIR_BIT,L
	JP		Z,.RETRY

;; MAKE RECURSIVE DIR HERE
	
	LD		HL,0
	ADD		HL,SP
	LD		DE,-64 
	ADD		HL,DE
	LD		SP,HL	
	EX		DE,HL
	PUSH	DE
	POP		IX ; DOS_FIB
	
	LD		L,(IY-2)
	LD		H,(IY-1)
	CALL	STRLEN
	LD		C,B
	LD		B,0
	LD		DE,DOS_CUR_PATH
	LDIR
	LD		A,'\'
	LD		(DE),A
	INC		DE
	XOR		A
	LD		(DE),A

	LD		DE,DOS_CUR_PATH
	LD		B,DIR_FLAG|HIDDEN_FLAG|SYSTEM_FLAG
	LD		C,_FFIRST
	CALL	DOS
	OR		A
	JP		NZ,.ERROR_PREPARE

.NEXT:
	PUSH	IX
	POP		HL
	INC		HL ; HL = FIB FILENAME
	LD		DE,STR_THIS_DIR
	LD		B,2
	CALL	STRNCMP
	JR		NC,.FNEXT
	
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	JR		NC,.FNEXT
	
	CALL	INC_PG
	
	PUSH	IX
	PUSH	IY

	LD		HL,0
	ADD		HL,SP
	LD		DE,-67
	ADD		HL,DE
	LD		SP,HL

	EX		DE,HL ; DE = STACK
	PUSH	DE

	LD		L,(IY-2)
	LD		H,(IY-1)
	CALL	STRLEN
	LD		C,B
	LD		B,0
	LDIR
	LD		A,'\'
	LD		(DE),A
	XOR		A
	INC		DE
	LD		(DE),A

	POP		DE
	PUSH	IX
	POP		HL
	INC		HL ; FIB FILENAME
	CALL	STRCAT

	CALL	DELETE_FILE_RECURSIVE
	EX		AF,AF' ; SAVE FLAGS
	
	LD		HL,0
	ADD		HL,SP
	LD		DE,67
	ADD		HL,DE
	LD		SP,HL
	
	POP		IY
	POP		IX

	EX		AF,AF'
	JP		C,.ERROR_PREPARE

.FNEXT:
	LD		C,_FNEXT
	CALL	DOS
	CP		ERR_NOFIL
	JR		Z,.RETRY
	OR		A
	JP		NZ,.ERROR_PREPARE
	JP		.NEXT
;;	
	
.RETRY:
	LD		L,(IY-4)
	LD		H,(IY-3)
	LD		DE,DOS_CUR_FILENAME
	CALL	STRCPY
	
	LD		L,(IY-2)
	LD		H,(IY-1)
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY

	LD		SP,IY

	LD		DE,PROGRESS_STR
	LD		HL,STR_DELETING
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	CALL	STRCAT
	CALL	UPDATE_PG_MSG

	LD		DE,DOS_CUR_PATH
	CALL	VIEW_CHECK_RO_FILE
	RET		C
	
	LD		DE,DOS_CUR_PATH
	LD		C,_DELETE
	CALL	DOS
	OR		A
	JR		NZ,.ERROR
	LD		HL,(DELETED_FILES)
	INC		HL
	LD		(DELETED_FILES),HL
	
	CALL	UPDATE_PG
	
	RET
	
.ERROR_PREPARE:

	LD		L,(IY-4)
	LD		H,(IY-3)
	LD		DE,DOS_CUR_FILENAME
	CALL	STRCPY
	
	LD		L,(IY-2)
	LD		H,(IY-1)
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
.ERROR:
	LD		SP,IY
	OR		A
	JR		Z,.ERROR_EXIT

	PUSH	AF
	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_ERROR_DELETE
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	LD		DE,DOS_ERROR_MSG
	CALL	STRCAT
	POP		AF
	LD		C,_EXPLAIN
	LD		B,A
	LD		DE,DOS_ERROR_MSG2
	CALL	BDOS
	
	CALL	GET_P2
	PUSH	AF	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_MESSAGE_DLG
	POP		AF
	CALL	PUT_P2
.ERROR_EXIT:
	SCF
	RET	
	
PROGRESS_BAR_DRAW:
	LD		H,(IX+AREA_P0+PX)
	LD		L,(IX+AREA_P0+PY)
	LD		D,(IX+AREA_P1+PX)
	LD		E,(IX+AREA_P1+PY)
	CALL	WINDOW_PARENT_ORIGIN
	LD		A,(IX+WIN_ATTR)

	PUSH	HL
	
	LD		A,D
	SUB		H
	LD		B,A ; LENGTH
	
	LD		DE,TMP_STR
	LD		A,' '
.FILL:
	LD		(DE),A
	INC		DE
	DJNZ	.FILL
	XOR		A
	LD		(DE),A
	EX		DE,HL
	LD		HL,TMP_STR
	CALL	STRLEN
	LD		A,(IX+WIN_ATTR)
	CALL	VIDEO_PRINT_SIZE

	LD		L,(IX+PROGRESS_BAR_CUR)
	LD		H,(IX+PROGRESS_BAR_CUR+1)
	
	ADD		HL,HL
	ADD		HL,HL
	ADD		HL,HL
	ADD		HL,HL
	ADD		HL,HL
	ADD		HL,HL
	
	LD		B,H
	LD		C,L
	
	LD		E,(IX+PROGRESS_BAR_MAX)
	LD		D,(IX+PROGRESS_BAR_MAX+1)
	CALL	DIV16

	LD		B,C	
	LD		DE,TMP_STR
	LD		A,' '
.FILL2:
	LD		(DE),A
	INC		DE
	DJNZ	.FILL2
	XOR		A
	LD		(DE),A
	EX		DE,HL
	LD		HL,TMP_STR
	CALL	STRLEN
	LD		A,BLUE_COLOR
	POP		DE
	CALL	VIDEO_PRINT_SIZE
	
	RET

USER_MENU_DRAW:
	CALL	WINDOW_DRAW_DIALOG
	
	LD		H,(IX+AREA_P0+PX)
	LD		L,(IX+AREA_P0+PY)
	LD		D,(IX+AREA_P1+PX)
	LD		E,(IX+AREA_P1+PY)
	CALL	WINDOW_PARENT_ORIGIN
	LD		A,(IX+WIN_ATTR)
	EX		AF,AF'
	
	LD		A,(USER_MENU_PTR+2)
	OR		A
	RET		Z

	CALL	GET_P2
	PUSH	AF
	LD		IX,(USER_MENU_PTR)	
	LD		A,(USER_MENU_PTR+2)
	CALL	PUT_P2
	
	LD		A,(MENU_SCROLL_ITEM)
	LD		(MENU_CUR_ITEM),A

	OR		A
	JR		Z,.FIRST
	LD		C,A
	
.SCROLL:
	LD		E,(IX+USER_ENTRY_NEXT)
	LD		D,(IX+USER_ENTRY_NEXT+1)
	LD		A,(IX+USER_ENTRY_NEXT+2)
	OR		A
	JR		Z,.EXIT
	CALL	PUT_P2
	PUSH	DE
	POP		IX
	DEC		C
	LD		A,C
	OR		A
	JR		NZ,.SCROLL
	
.FIRST:
	
	LD		B,12
	INC		H
	INC		H
	INC		H
	INC		L
	INC		L
.ENTRY:
	PUSH	BC
	
	LD		DE,TMP_STR
	LD		A,(IX+USER_ENTRY_KEY)
	LD		(DE),A
	INC		DE
	LD		A,' '
	LD		(DE),A
	INC		DE
	LD		A,':'
	LD		(DE),A
	INC		DE
	LD		A,' '
	LD		(DE),A
	INC		DE
	
	PUSH	HL
	
	PUSH	IX
	POP		HL
	WALK	HL, 0, USER_ENTRY_LABEL
	LD		BC,32
	LDIR	
	XOR		A
	LD		(DE),A
	
	POP		HL
	
	EX		AF,AF'
	PUSH	AF

	PUSH	DE
	LD		E,A
	LD		A,(MENU_CUR_ITEM)
	LD		D,A
	LD		A,(MENU_SELECTED_ITEM)
	CP		D
	JR		NZ,.NOT_SEL
	LD		E,CYAN_COLOR
.NOT_SEL:
	LD		A,E
	POP		DE

	PUSH	HL
	EX		DE,HL
	LD		HL,TMP_STR
	CALL	STRLEN
	CALL	VIDEO_PRINT_SIZE
	POP		HL
	INC		L
	POP		AF
	EX		AF,AF'
	
	LD		A,(MENU_CUR_ITEM)
	INC		A
	LD		(MENU_CUR_ITEM),A
	
	POP		BC
	DEC		B

	LD		E,(IX+USER_ENTRY_NEXT)
	LD		D,(IX+USER_ENTRY_NEXT+1)
	LD		A,(IX+USER_ENTRY_NEXT+2)
	OR		A
	JR		Z,.EXIT
	CALL	PUT_P2
	PUSH	DE
	POP		IX
	
	LD		A,B
	OR		A
	JP		NZ,.ENTRY	
.EXIT:

	POP		AF	
	CALL	PUT_P2
	
	RET	
	
USER_MENU_UPDATE:
	PUSH	AF
	PUSH	DE
	CALL	WINDOW_UPDATE_DLG
	EX		AF,AF'
	POP		DE
	POP		AF
	EX		AF,AF'
	RET		C
	EX		AF,AF'

	CP		KEYPRESS_EVENT
	JP		Z,.KEYPRESS
	CP		LCLICKPRESS_EVENT
	JP		Z,.LCLICK
	CP		LDCLICKPRESS_EVENT
	JP		Z,.LDCLICK
.EARLY_EXIT:
	OR		A
	RET
.LDCLICK:
	LD		A,E
	SUB		2
	JP		M,.EARLY_EXIT
	CP		12
	JP		P,.EARLY_EXIT
	JP		.EXEC
.LCLICK:

	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	
	LD		A,E
	SUB		2
	JP		M,.PAGE_UP
	CP		12
	JP		P,.PAGE_DOWN
	LD		E,A
	LD		HL,(MENU_SCROLL_ITEM)
	LD		H,0
	LD		D,0
	ADD		HL,DE
	EX		DE,HL
	LD		HL,(MENU_NUM_ITEMS)
	LD		H,0
	AND		A
	SBC		HL,DE
	RET		M
	RET		Z
	LD		A,E
	LD		(MENU_SELECTED_ITEM),A
	RET
.KEYPRESS:
	LD		A,E
	CP		GKEY_UP
	JP		Z,.GO_UP
	CP		GKEY_DOWN
	JP		Z,.GO_DOWN
	CP		$0D
	JP		Z,.EXEC
	CP		'0'
	JP		M,.EARLY_EXIT
	CP		':'
	JP		M,.FIND_KEY
	CP		'A'
	JP		M,.EARLY_EXIT
	CP		'['
	JP		M,.FIND_KEY
	CP		'a'
	JP		M,.EARLY_EXIT
	CP		'{'
	JP		M,.FIND_LOWER_KEY
	OR		A
	RET
.FIND_LOWER_KEY:
	SUB		'a'-'A'
.FIND_KEY:
	EX		AF,AF'

	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A

	LD		A,(USER_MENU_PTR+2)
	OR		A
	RET		Z
	
	CALL	GET_P2
	PUSH	AF
	
	LD		IY,(USER_MENU_PTR)	
	LD		A,(USER_MENU_PTR+2)
	CALL	PUT_P2
	
	LD		A,(MENU_SELECTED_ITEM)
	INC		A
	LD		C,A
.SCROLL:
	LD		E,(IY+USER_ENTRY_NEXT)
	LD		D,(IY+USER_ENTRY_NEXT+1)
	LD		A,(IY+USER_ENTRY_NEXT+2)
	OR		A
	JP		Z,.EXIT_FIND_KEY
	CALL	PUT_P2
	PUSH	DE
	POP		IY
	DEC		C
	LD		A,C
	OR		A
	JR		NZ,.SCROLL

	LD		A,(MENU_SELECTED_ITEM)
	INC		A
	LD		C,A
	
.NEXT:
	EX		AF,AF'
	LD		E,(IY+USER_ENTRY_KEY)
	CP		E
	JP		Z,.KEY_FOUND
	EX		AF,AF'
	LD		E,(IY+USER_ENTRY_NEXT)
	LD		D,(IY+USER_ENTRY_NEXT+1)
	LD		A,(IY+USER_ENTRY_NEXT+2)
	OR		A
	JP		Z,.EXIT_FIND_KEY
	CALL	PUT_P2
	PUSH	DE
	POP		IY
	INC		C
	JR		.NEXT
.KEY_FOUND:
	LD		A,C
	LD		(MENU_SELECTED_ITEM),A
.EXIT_FIND_KEY:
	POP		AF
	CALL	PUT_P2
	
	LD		A,(MENU_SCROLL_ITEM)
	CP		C
	JP		P,.NOT_VISIBLE
	ADD		A,11
	CP		C
	JP		M,.NOT_VISIBLE
	SCF
	RET
.NOT_VISIBLE:
	LD		A,C
	LD		(MENU_SCROLL_ITEM),A
	SCF
	RET
		
.PAGE_DOWN:
	LD		HL,(MENU_SCROLL_ITEM)
	LD		H,0
	LD		DE,11
	ADD		HL,DE
	EX		DE,HL
	LD		HL,(MENU_NUM_ITEMS)
	LD		H,0
	AND		A
	SBC		HL,DE
	JP		M,.MAX
	JR		Z,.MAX
	EX		DE,HL
	JP		.STORE
.MAX:
	LD		HL,(MENU_NUM_ITEMS)
	LD		H,0
	DEC		HL
	JP		.STORE
.PAGE_UP:
	LD		HL,(MENU_SCROLL_ITEM)
	LD		H,0
	LD		DE,11
	AND		A
	SBC		HL,DE
	JP		M,.ZERO
	JR		.STORE
.ZERO:
	LD		HL,0
.STORE:
	LD		A,L
	LD		(MENU_SCROLL_ITEM),A
	LD		(MENU_SELECTED_ITEM),A
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	SCF
	RET

.GO_DOWN:
	LD		A,KEY_CTRL
	CALL	KEY_IS_PRESSED
	JP		C,.PAGE_DOWN

	LD		DE,(MENU_SELECTED_ITEM)
	LD		D,0
	INC		DE
	LD		HL,(MENU_NUM_ITEMS)
	LD		H,0
	DEC		HL
	OR		A
	SBC		HL,DE
	RET		M
	LD		A,E
	LD		(MENU_SELECTED_ITEM),A
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	
	EX		DE,HL ; HL = SELECTED
	LD		B,H
	LD		C,L
	LD		DE,(MENU_SCROLL_ITEM)
	LD		D,0
	OR		A
	SBC		HL,DE
	LD		A,L
	CP		11
	JP		P,.SCROLL_DOWN
	SCF
	RET
.SCROLL_DOWN:
	LD		HL,-11
	ADD		HL,BC
	LD		A,L
	LD		(MENU_SCROLL_ITEM),A
	SCF
	RET
	
.GO_UP:
	LD		A,KEY_CTRL
	CALL	KEY_IS_PRESSED
	JP		C,.PAGE_UP
	
	LD		DE,(MENU_SELECTED_ITEM)
	LD		D,0
	LD		A,E
	OR		D
	RET		Z
	DEC		DE
	LD		A,E
	LD		(MENU_SELECTED_ITEM),A
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	
	EX		DE,HL
	LD		DE,(MENU_SCROLL_ITEM)
	LD		D,0
	OR		A
	SBC		HL,DE
	JP		M,.SCROLL_UP
	SCF
	RET
.SCROLL_UP:
	ADD		HL,DE
	LD		A,L
	LD		(MENU_SCROLL_ITEM),A
	SCF
	RET	

.EXEC:
	JP	USER_MENU_EXEC
	
USER_MENU_EXEC:	
	LD		A,(USER_MENU_PTR+2)
	OR		A
	RET		Z
	
	CALL	GET_P2
	PUSH	AF
	LD		IY,(USER_MENU_PTR)	
	LD		A,(USER_MENU_PTR+2)
	CALL	PUT_P2
	
	LD		A,(MENU_SELECTED_ITEM)
	OR		A
	JR		Z,.FIRST
	LD		C,A
.SCROLL:
	LD		E,(IY+USER_ENTRY_NEXT)
	LD		D,(IY+USER_ENTRY_NEXT+1)
	LD		A,(IY+USER_ENTRY_NEXT+2)
	OR		A
	JP		Z,.EXIT
	CALL	PUT_P2
	PUSH	DE
	POP		IY
	DEC		C
	LD		A,C
	OR		A
	JR		NZ,.SCROLL
	
.FIRST:
	PUSH	IY
	POP		HL
	LD		DE,USER_ENTRY_COMMAND
	ADD		HL,DE
	LD		DE,SHELL_PARAMS
	LD		BC,TEXT_BOX_TEXT_SIZE
	LDIR
	POP		AF
	CALL	PUT_P2
	
	CALL	WINDOW_CLOSE
	
	POP		AF
	CALL	PUT_P2
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		IY,(CUR_VIEW)
	
	LD		A,(IY+VIEW_CUR_DRIVE)
	ADD		A,'@'
	LD		(TMP_STR),A
	XOR		A
	LD		(TMP_STR+1),A
	LD		DE,TMP_STR
	LD		HL,STR_ENV_SDRV
	LD		C,_SENV
	CALL	BDOS
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	EX		DE,HL
	LD		HL,STR_ENV_SPTH
	LD		C,_SENV
	CALL	BDOS

	PUSH	IY
	POP		HL
	LD		DE,VIEW_SEL_FILE
	ADD		HL,DE
	EX		DE,HL
	LD		HL,STR_ENV_SFIL
	LD		C,_SENV
	CALL	BDOS
	
	LD		HL,(CUR_VIEW)
	LD		DE,LEFT_VIEW
	AND		A
	SBC		HL,DE
	JR		Z,.RIGHT
	
	LD		IY,LEFT_VIEW
	JR		.CONT
.RIGHT:
	LD		IY,RIGHT_VIEW
.CONT:
	
	LD		A,(IY+VIEW_CUR_DRIVE)
	ADD		A,'@'
	LD		(TMP_STR),A
	XOR		A
	LD		(TMP_STR+1),A
	LD		DE,TMP_STR
	LD		HL,STR_ENV_TDRV
	LD		C,_SENV
	CALL	BDOS
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	EX		DE,HL
	LD		HL,STR_ENV_TPTH
	LD		C,_SENV
	CALL	BDOS

	PUSH	IY
	POP		HL
	LD		DE,VIEW_SEL_FILE
	ADD		HL,DE
	EX		DE,HL
	LD		HL,STR_ENV_TFIL
	LD		C,_SENV
	CALL	BDOS

	JP		MC_EXEC

.EXIT:	
	CALL	WINDOW_CLOSE

	RET
	
VIEW_OPEN_COPY_DLG:

	XOR		A
	LD		(FIRST_COPY_CHUNK),A
	LD		(FIRST_COPY_CHUNK+1),A
	LD		(FIRST_COPY_CHUNK+2),A
	LD		(CURR_COPY_CHUNK),A
	LD		(CURR_COPY_CHUNK+1),A
	LD		(CURR_COPY_CHUNK+2),A
	LD		(RO_ALL),A
	LD		(OVERWRITE_ALL),A
	LD		(COPY_ERROR),A
		
	LD		A,(PAGE2)
	CALL	PUT_P2

	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	EX		DE,HL
	
	LD		HL,(OPP_VIEW)
	LD		BC,VIEW_CUR_PATH
	ADD		HL,BC
	CALL	STRLEN
	INC		B
	CALL	STRNCMP
	JR		C,.OK
	
	LD		DE,STR_SPACE
	LD		HL,STR_ERROR_COPY_ITSELF
	CALL	OPEN_MESSAGE_DLG	
	RET
.OK:
	LD		IX,(CUR_VIEW)

	LD		HL,STR_NUMBER_U16
	LD		DE,TMP_STR
	CALL	STRCPY
	
	CALL	VIEW_COUNT_SELECTED
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	EX		DE,HL
	
	LD		A,H
	OR		L
	JR		Z,.NO_SEL
	
	PUSH	IX
	LD		IX,PROGRESS_PG
	LD		(IX+PROGRESS_BAR_MAX),L
	LD		(IX+PROGRESS_BAR_MAX+1),H
	XOR		A
	LD		(IX+PROGRESS_BAR_CUR),A
	LD		(IX+PROGRESS_BAR_CUR+1),A
	LD		(PROGRESS_STR),A
	POP		IX
	
	
	
	LD		DE,TMP_STR
	CALL	U16_TO_ASCII
	
	LD		DE,STR_CONFIRM_MSG
	LD		HL,STR_COPY_MSG
	CALL	STRCPY
	
	LD		HL,TMP_STR
	CALL	STRCAT_NOLEADSPACE
	
	LD		HL,STR_COPY_FILES
	CALL	STRCAT
	JP		.SHOW
	
.NO_SEL:
	PUSH	IX
	LD		IX,PROGRESS_PG
	LD		(IX+PROGRESS_BAR_MAX),1
	LD		(IX+PROGRESS_BAR_MAX+1),0
	XOR		A
	LD		(IX+PROGRESS_BAR_CUR),A
	LD		(IX+PROGRESS_BAR_CUR+1),A
	LD		(PROGRESS_STR),A

	POP		IX

	LD		DE,STR_CONFIRM_MSG
	LD		HL,STR_COPY_MSG
	CALL	STRCPY
	
	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,STR_CONFIRM_MSG
	CALL	STRCAT	
	
	CALL	VIEW_FIND_SELECTED_ITEM
	
	PUSH	IY
	POP		HL
	LD		A,H
	OR		L
	RET		Z
	
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	RET		NC
	
	LD		DE,STR_CONFIRM_MSG
	CALL	STRCAT
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		DE,STR_CONFIRM_MSG;
	LD		HL,STR_TO
	CALL	STRCAT
	
.SHOW:
	LD		IX,CONFIRM_MSG
	WIN_SETLABEL	STR_CONFIRM_MSG	
.CENTER:
	LD		HL,STR_CONFIRM_MSG
	CALL	STRLEN
	LD		IY,CONFIRM_DIALOG
	LD		A,(IY+AREA_P1+PX)
	LD		D,(IY+AREA_P0+PX)
	SUB		D
	PUSH	AF
	SUB		B
	SRA		A
	LD		(IX+AREA_P0+PX),A
		
	LD		HL,(CUR_VIEW)
	LD		DE,LEFT_VIEW
	AND		A
	SBC		HL,DE
	JR		Z,.RIGHT
	LD		HL,LEFT_VIEW+VIEW_CUR_PATH
	JR		.CONT
.RIGHT:
	LD		HL,RIGHT_VIEW+VIEW_CUR_PATH
.CONT:
	LD		DE,STR_CONFIRM_MSG2
	CALL	STRCPY
	LD		DE,STR_CONFIRM_MSG2
	LD		HL,STR_QUESTION
	CALL	STRCAT

	LD		IX,CONFIRM_MSG2
	WIN_SETFLAGS	INIT_FLAGS
	WIN_SETLABEL	STR_CONFIRM_MSG2
	LD		HL,STR_CONFIRM_MSG2
	CALL	STRLEN
	POP		AF
	SUB		B
	SRA		A
	LD		(IX+AREA_P0+PX),A
	
		
	LD		IX,CONFIRM_DIALOG
	WIN_SETUPDATE_F	WINDOW_UPDATE_COPY_DLG
	WIN_SETLABEL	STR_COPY_MSG	
	
	CALL	WINDOW_OPEN

	RET

	
;
;
;
;
;

VIEW_COPY_FILES:
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	
	CALL	VIEW_COUNT_SELECTED
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	EX		DE,HL
	
	LD		A,H
	OR		L
	JR		Z,.NO_SEL

	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	WIN_SETLABEL	STR_COPY_MSG	
	CALL	WINDOW_OPEN
	POP		IX
	
	LD		A,1
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	
	LD		HL,0
	LD		(COPIED_FILES),HL
	
	CALL	COPY_SELECTED_FILES
	CALL	FLUSH_COPY_BUFFERS
	CALL	MALLOC_COALESCE

	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(OPP_VIEW)
	LD		HL,(COPIED_FILES)
	LD		A,H
	OR		L
	JR		Z,.SKIP_RESCAN
	LD		A,1
	LD		(IX+VIEW_RESCAN),A
.SKIP_RESCAN:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	CALL	WINDOW_CLOSE
	POP		IX
	
	LD		A,0
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN

	RET
	
.NO_SEL:

	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	WIN_SETLABEL	STR_COPY_MSG	
	CALL	WINDOW_OPEN
	POP		IX

	CALL	VIEW_FIND_SELECTED_ITEM
	
	LD		HL,0
	LD		(COPIED_FILES),HL

	CALL	VIEW_COPY_FILE
	CALL	FLUSH_COPY_BUFFERS
	CALL	MALLOC_COALESCE

	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(OPP_VIEW)

	LD		HL,(COPIED_FILES)
	LD		A,H
	OR		L
	JR		Z,.SKIP_RESCAN2
	LD		A,1
	LD		(IX+VIEW_RESCAN),A
.SKIP_RESCAN2:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	CALL	WINDOW_CLOSE
	POP		IX
	RET
	
COPY_SELECTED_FILES:
	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,(IX+WIN_CHILD+2)
	OR		A
	RET		Z
	
	CALL	PUT_P2	; FIRST
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT

	CALL	GET_P2
	PUSH	AF
	CALL	VIEW_COPY_FILE
	EX		AF,AF'
	POP		AF
	CALL	PUT_P2
	EX		AF,AF'
	RET		C
	
.NEXT:
	LD		L,(IY+WIN_NEXT)
	LD		H,(IY+WIN_NEXT+1)
	LD		A,(IY+WIN_NEXT+2)
	OR		A
	RET		Z
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT
	CALL	GET_P2
	PUSH	AF
	CALL	VIEW_COPY_FILE
	EX		AF,AF'
	POP		AF
	CALL	PUT_P2
	EX		AF,AF'
	RET		C
	
	JR		.NEXT
	RET
	
VIEW_COPY_FILE:
	
	CALL	GET_P2
	PUSH	AF
		
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)

	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
	POP		AF
	CALL	PUT_P2
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCAT
	
	PUSH	IX
	PUSH	IY
	LD		HL,0
	ADD		HL,SP
	LD		DE,-67
	ADD		HL,DE
	LD		SP,HL	
	EX		DE,HL
	LD		HL,DOS_CUR_PATH
	LD		BC,67
	LDIR
	
	CALL	COPY_FILE_RECURSIVE
	EX		AF,AF'
	
	LD		HL,0
	ADD		HL,SP
	LD		DE,67
	ADD		HL,DE
	LD		SP,HL
	POP		IY
	POP		IX
	EX		AF,AF'
	RET

CREATE_DIR:
.RETRY:
	LD		A,(FIRST_COPY_CHUNK+2)
	OR		A
	JR		Z,.FIRST_CHUNK2	
	LD		BC,3+7+67
	CALL	MALLOC
	OR		A
	JP		Z,.FLUSH2
	EX		AF,AF'
	LD		A,(CURR_COPY_CHUNK+2)
	CALL	PUT_P2
	EX		DE,HL
	LD		HL,(CURR_COPY_CHUNK)
	LD		(HL),E
	INC		HL
	LD		(HL),D
	INC		HL
	EX		AF,AF'
	LD		(HL),A
	LD		(CURR_COPY_CHUNK),DE
	LD		(CURR_COPY_CHUNK+2),A
	CALL	PUT_P2
	JR		.MDIR
.FIRST_CHUNK2:
	LD		BC,3+7+67
	CALL	MALLOC
	OR		A
	JR		Z,.FLUSH2
	LD		(FIRST_COPY_CHUNK+2),A
	LD		(FIRST_COPY_CHUNK),HL
	LD		(CURR_COPY_CHUNK),HL
	LD		(CURR_COPY_CHUNK+2),A
	CALL	PUT_P2
.MDIR:	
	LD		HL,(CURR_COPY_CHUNK)
	XOR		A
	LD		(HL),A
	INC		HL
	LD		(HL),A
	INC		HL
	LD		(HL),A
	INC		HL
	LD		(HL),A
	INC		HL
	LD		(HL),A ; SIZE
	INC		HL
.ATTRIB:

	PUSH	IX
	PUSH	HL
	LD		IX,DOS_FIB3
	LD		E,(IY-2)
	LD		D,(IY-1)	
	LD		B,DIR_FLAG|HIDDEN_FLAG|SYSTEM_FLAG
	LD		C,_FFIRST
	CALL	DOS
	POP		HL
	EX		AF,AF'
	LD		A,(IX+14)
	AND		DIR_FLAG|HIDDEN_FLAG
	LD		(HL),A
	EX		AF,AF'
	INC		HL
	LD		C,(IX+15)
	LD		B,(IX+16)
	LD		(HL),C
	INC		HL
	LD		(HL),B
	INC		HL	
	LD		C,(IX+17)
	LD		B,(IX+18)
	LD		(HL),C
	INC		HL
	LD		(HL),B
	INC		HL
	
	POP		IX
	OR		A
	JR		NZ,.ERROR_FLUSH
	
	;PUSH	HL
	;LD		C,_ATTR
	;XOR		A
	;LD		E,(IY-2)
	;LD		D,(IY-1)	
	;CALL	DOS
	;LD		B,L
	;POP		HL
	;OR		A
	;JR		NZ,.ERROR_FLUSH	
	;LD		(HL),B
	;INC		HL
	
	;PUSH	HL
	LD		C,_FTIME
	;XOR		A
	;LD		E,(IY-2)
	;LD		D,(IY-1)	
	;CALL	DOS
	;LD		B,H
	;LD		C,L
	;POP		HL
	;OR		A
	;JR		NZ,.ERROR_FLUSH
		
	;LD		(HL),E
	;INC		HL
	;LD		(HL),D
	;INC		HL ; TIME
	
	;LD		(HL),C
	;INC		HL
	;LD		(HL),B
	;INC		HL; DATE
	
	EX		DE,HL
	LD		HL,DOS_CUR_PATH2
	CALL	STRCPY

	OR		A
	RET
	
.FLUSH2:
	CALL	FLUSH_COPY_BUFFERS
	JR		C,.ERROR_FLUSH
	CALL	MALLOC_COALESCE
	JP		.RETRY

.ERROR_FLUSH:
	SCF
	RET
	
COPY_FILE_RECURSIVE:

	LD		HL,0
	ADD		HL,SP
	PUSH	HL
	POP		IY ; IY = STACK
	INC		HL
	INC		HL

	LD		D,H
	LD		E,L
	CALL	STRLEN
	LD		C,B
	LD		B,0
	ADD		HL,BC ; PATH END
	
.FILENAME:
	DEC		HL
	LD		A,(HL)
	CP		'\'
	JR		NZ,.FILENAME
.FILENAME_START:
	INC		HL	
	PUSH	DE ; PATH (YI-2)
	PUSH	HL ; FILENAME (YI-4)
	
	;LD		C,_ATTR
	;LD		A,0
	;CALL	DOS
	;OR		A
	;JP		NZ,.ERROR_PREPARE

	PUSH	IX
	LD		IX,DOS_FIB3
	LD		B,DIR_FLAG|HIDDEN_FLAG|SYSTEM_FLAG
	LD		C,_FFIRST
	CALL	DOS
	LD		L,(IX+14)
	POP		IX

	OR		A
	JP		NZ,.ERROR_PREPARE

	BIT		DIR_BIT,L
	JP		Z,.RETRY

;; MAKE RECURSIVE DIR HERE

	CALL	GET_P2
	PUSH	AF
	LD		A,(PAGE2)
	CALL	PUT_P2

	PUSH	HL
	EXX
	LD		HL,(OPP_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH2
	CALL	STRCPY
	
	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	CALL	STRLEN
	LD		C,B
	LD		B,0
	
	LD		L,(IY-2)
	LD		H,(IY-1)	
	ADD		HL,BC
	LD		DE,DOS_CUR_PATH2
	CALL	STRCAT
	
	POP		HL
	CALL	CREATE_DIR
	
	EXX
	EX		AF,AF'
	POP		AF
	CALL	PUT_P2
	EX		AF,AF'	
	JP		C,.ERROR_FLUSH
	
	LD		HL,0
	ADD		HL,SP
	LD		DE,-64 
	ADD		HL,DE
	LD		SP,HL	
	EX		DE,HL
	PUSH	DE
	POP		IX ; DOS_FIB
	
	LD		L,(IY-2)
	LD		H,(IY-1)
	CALL	STRLEN
	LD		C,B
	LD		B,0
	LD		DE,DOS_CUR_PATH
	LDIR
	LD		A,'\'
	LD		(DE),A
	INC		DE
	XOR		A
	LD		(DE),A

	LD		DE,DOS_CUR_PATH
	LD		B,DIR_FLAG|HIDDEN_FLAG|SYSTEM_FLAG
	LD		C,_FFIRST
	CALL	DOS
	OR		A
	JP		NZ,.ERROR_PREPARE

.NEXT:
	PUSH	IX
	POP		HL
	INC		HL ; HL = FIB FILENAME
	LD		DE,STR_THIS_DIR
	LD		B,2
	CALL	STRNCMP
	JR		NC,.FNEXT
	
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	JR		NC,.FNEXT
	
	CALL	INC_PG
	
	PUSH	IX
	PUSH	IY

	LD		HL,0
	ADD		HL,SP
	LD		DE,-67
	ADD		HL,DE
	LD		SP,HL

	EX		DE,HL ; DE = STACK
	PUSH	DE

	LD		L,(IY-2)
	LD		H,(IY-1)
	CALL	STRLEN
	LD		C,B
	LD		B,0
	LDIR
	LD		A,'\'
	LD		(DE),A
	XOR		A
	INC		DE
	LD		(DE),A

	POP		DE
	PUSH	IX
	POP		HL
	INC		HL ; FIB FILENAME
	CALL	STRCAT

	CALL	COPY_FILE_RECURSIVE
	EX		AF,AF' ; SAVE FLAGS
	
	LD		HL,0
	ADD		HL,SP
	LD		DE,67
	ADD		HL,DE
	LD		SP,HL
	
	POP		IY
	POP		IX

	EX		AF,AF'
	JP		C,.ERROR_PREPARE

.FNEXT:
	LD		C,_FNEXT
	CALL	DOS
	CP		ERR_NOFIL
	JR		Z,.FEND
	OR		A
	JP		NZ,.ERROR_PREPARE
	JP		.NEXT
.FEND:
	LD		SP,IY
	OR		A
	RET
;;	
	
.RETRY:
	LD		L,(IY-4)
	LD		H,(IY-3)
	LD		DE,DOS_CUR_FILENAME
	CALL	STRCPY
	
	LD		L,(IY-2)
	LD		H,(IY-1)
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY

	LD		SP,IY
	
	EXX
	CALL	GET_P2
	PUSH	AF
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		HL,(OPP_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH2
	CALL	STRCPY
	
	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	CALL	STRLEN
	LD		C,B
	LD		B,0
	
	LD		HL,DOS_CUR_PATH
	ADD		HL,BC
	LD		DE,DOS_CUR_PATH2
	CALL	STRCAT
	POP		AF
	CALL	PUT_P2
	EXX	
._FFIRST:
	PUSH	IX
	LD		IX,DOS_FIB2
	LD		DE,DOS_CUR_PATH
	LD		B,HIDDEN_FLAG|SYSTEM_FLAG
	LD		C,_FFIRST
	CALL	DOS
	LD		B,(IX+14)
	RES		7,B
	LD		(IX+14),B
	POP		IX
	OR		A
	JP		NZ,.ERROR
	
	LD		DE,DOS_CUR_PATH
	LD		C,_OPEN
	LD		A,1
	CALL	DOS
	OR		A
	JP		NZ,.ERROR
	LD		A,B
	LD		(DOS_SRC_HANDLE),A

.LOAD_CHUNK:
	LD		A,(DOS_SRC_HANDLE)
	OR		A
	RET		Z

	PUSH	IX
	LD		IX,DOS_FIB2
	LD		E,(IX+23)
	LD		D,(IX+24)
	LD		A,E
	OR		D
	JR		NZ,.MAX
	LD		E,(IX+21)
	LD		D,(IX+22)
	LD		HL,16300
	AND		A
	SBC		HL,DE
	JP		C,.MAX
	LD		(COPY_SIZE),DE
	JR		.CONT2
.MAX:
	LD		HL,16300
	LD		(COPY_SIZE),HL
	EX		DE,HL
.CONT2:
	LD		L,(IX+21)
	LD		H,(IX+22)
	AND		A
	SBC		HL,DE
	LD		(IX+21),L
	LD		(IX+22),H
	LD		L,(IX+23)
	LD		H,(IX+24)
	LD		DE,0
	SBC		HL,DE
	LD		(IX+23),L
	LD		(IX+24),H
	POP		IX
	
	LD		A,(FIRST_COPY_CHUNK+2)
	OR		A
	JR		Z,.FIRST_CHUNK
	LD		HL,(COPY_SIZE)
	LD		BC,3+7+67
	ADD		HL,BC
	LD		B,H
	LD		C,L
	CALL	MALLOC
	OR		A
	JP		Z,.FLUSH
	EX		AF,AF'
	LD		A,(CURR_COPY_CHUNK+2)
	CALL	PUT_P2
	EX		DE,HL
	LD		HL,(CURR_COPY_CHUNK)
	LD		(HL),E
	INC		HL
	LD		(HL),D
	INC		HL
	EX		AF,AF'
	LD		(HL),A
	LD		(CURR_COPY_CHUNK),DE
	LD		(CURR_COPY_CHUNK+2),A
	CALL	PUT_P2
	JR		.LOAD
.FIRST_CHUNK:
	LD		HL,(COPY_SIZE)
	LD		BC,3+7+67
	ADD		HL,BC
	LD		B,H
	LD		C,L
	CALL	MALLOC
	OR		A
	JP		Z,.FLUSH
	LD		(FIRST_COPY_CHUNK+2),A
	LD		(FIRST_COPY_CHUNK),HL
	LD		(CURR_COPY_CHUNK),HL
	LD		(CURR_COPY_CHUNK+2),A
	CALL	PUT_P2
.LOAD:	
	LD		DE,PROGRESS_STR
	LD		HL,STR_READING
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	CALL	STRCAT
	CALL	UPDATE_PG_MSG

	LD		HL,(COPY_SIZE)
	LD		A,H
	OR		L
	JP		Z,.EOF
	LD		C,_READ
	LD		A,(DOS_SRC_HANDLE)
	LD		B,A
	LD		DE,(CURR_COPY_CHUNK)
	LD		HL,3+7+67
	ADD		HL,DE
	EX		DE,HL
	LD		HL,(COPY_SIZE)
	CALL	DOS
	CP		ERR_EOF
	JR		Z,.EOF
	OR		A
	JP		NZ,.ERROR_LOAD
	JR		.FILL
.EOF:		
	PUSH	HL
	LD		C,_CLOSE
	LD		A,(DOS_SRC_HANDLE)
	LD		B,A
	CALL	DOS
	POP		HL
	XOR		A
	LD		(DOS_SRC_HANDLE),A
.FILL:
	EX		DE,HL ; DE = size
	LD		HL,(CURR_COPY_CHUNK)
	XOR		A
	LD		(HL),A
	INC		HL
	LD		(HL),A
	INC		HL
	LD		(HL),A
	INC		HL
	LD		(HL),E
	INC		HL
	LD		(HL),D ; SIZE
	INC		HL
.ATTRIB:
	PUSH	IX
	LD		IX,DOS_FIB2
	LD		A,(IX+14) ; ATTRIB
	LD		(HL),A
	SET		7,A
	LD		(IX+14),A
	
	INC		HL
	LD		A,(IX+15)
	LD		(HL),A
	INC		HL
	LD		A,(IX+16)
	LD		(HL),A
	INC		HL ; TIME
	
	LD		A,(IX+17)
	LD		(HL),A
	INC		HL
	LD		A,(IX+18)
	LD		(HL),A
	INC		HL; DATE
	POP		IX
	
	EX		DE,HL
	LD		HL,DOS_CUR_PATH2
	CALL	STRCPY

	CALL	CHECK_ESC_KEY
	JP		C,.ERROR_FLUSH
	
	JP		.LOAD_CHUNK
	
.FLUSH:
	PUSH	IY
	CALL	FLUSH_COPY_BUFFERS
	PUSH	AF
	CALL	MALLOC_COALESCE
	POP		AF
	POP		IY
	JR		C,.ERROR_CLOSE
	JP		.LOAD_CHUNK
.ERROR_LOAD:

	PUSH	AF
	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_ERROR_COPY
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	LD		DE,DOS_ERROR_MSG
	CALL	STRCAT
	POP		AF
	
	LD		C,_EXPLAIN
	LD		B,A
	LD		DE,DOS_ERROR_MSG2
	CALL	BDOS
	
	CALL	GET_P2
	PUSH	AF	
	PUSH	IX
	PUSH	IY
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_MESSAGE_DLG
	
	POP		IY
	POP		IX
	POP		AF
	CALL	PUT_P2
	
.ERROR_FLUSH:
	PUSH	IY
	LD		A,1
	LD		(COPY_ERROR),A
	CALL	FLUSH_COPY_BUFFERS
	CALL	MALLOC_COALESCE
	POP		IY
	SCF
	
.ERROR_CLOSE:
	PUSH	AF
	LD		C,_CLOSE
	LD		A,(DOS_SRC_HANDLE)
	OR		A
	JR		Z,.SKIP_CLOSE
	LD		B,A
	CALL	DOS
	XOR		A
	LD		(DOS_SRC_HANDLE),A	
.SKIP_CLOSE:
	LD		C,_HDELETE
	LD		A,(DOS_TGT_HANDLE)
	OR		A
	JR		Z,.SKIP_CLOSE2
	LD		B,A
	CALL	DOS
	XOR		A
	LD		(DOS_TGT_HANDLE),A	
.SKIP_CLOSE2:
	POP		AF
	JP		.ERROR
	
.ERROR_PREPARE:
.ERROR:
	LD		SP,IY
	SCF
	RET	
	
FLUSH_COPY_BUFFERS:
	DEBUG_COLOR $71
	CALL	GET_P2
	PUSH	AF
	PUSH	IY
	
	LD		A,(FIRST_COPY_CHUNK+2)
	OR		A
	JP		Z,.END
	CALL	PUT_P2
	LD		IY,(FIRST_COPY_CHUNK)
	
.NEXT:
	
	LD		A,(COPY_ERROR)
	OR		A
	JR		NZ,.SKIP_SAVE
	PUSH	IY
	CALL	SAVE_CHUNK
	POP		IY
	DEBUG_COLOR $7F
	JR		NC,.SKIP_SAVE
	LD		A,1
	LD		(COPY_ERROR),A
.SKIP_SAVE:
	LD		L,(IY+0)
	LD		H,(IY+1)
	LD		A,(IY+2)
	
	PUSH	AF
	PUSH	HL
	PUSH	IY
	POP		HL
	CALL	GET_P2
	CALL	FREE
	POP		HL
	POP		AF
	
	OR		A
	JR		Z,.END
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	JR		.NEXT
.END:
	LD		A,(COPY_ERROR)
	OR		A
	JR		Z,.NO_ERROR
	XOR		A
	SCF
.NO_ERROR:
	EX		AF,AF'
	LD		HL,0
	XOR		A
	LD		(FIRST_COPY_CHUNK),HL
	LD		(FIRST_COPY_CHUNK+2),A	
	LD		(CURR_COPY_CHUNK),HL
	LD		(CURR_COPY_CHUNK+2),A

	POP		AF
	CALL	PUT_P2
	POP		IY
	EX		AF,AF'
	RET

SAVE_CHUNK:

	DEBUG_COLOR $7F

	LD		L,(IY+3)
	LD		H,(IY+4)
	LD		A,L
	OR		H
	JP		Z,.CLOSE

	LD		A,(DOS_TGT_HANDLE)
	OR		A
	JR		NZ,.WRITE
	
	PUSH	IY
	POP		HL
	
	LD		DE,3+7
	ADD		HL,DE
	EX		DE,HL

	PUSH	DE
	PUSH	IY
	CALL	VIEW_CHECK_FILE
	POP		IY
	POP		DE
	RET		C
	OR		A
	JP		NZ,.ERROR
	
	LD		B,(IY+5)
	RES		RDONLY_BIT,B
	LD		C,_CREATE
	XOR		A
	CALL	DOS
	CP		ERR_FILEX
	JR		Z,.EXISTS
	OR		A
	JP		NZ,.ERROR
	
	LD		A,B
	LD		(DOS_TGT_HANDLE),A
	JP		.WRITE
.EXISTS:
	PUSH	IY
	POP		HL
	LD		DE,3+7
	ADD		HL,DE
	EX		DE,HL
	LD		C,_OPEN
	XOR		A
	CALL	DOS
	OR		A
	JP		NZ,.ERROR
	LD		A,B
	LD		(DOS_TGT_HANDLE),A
.SEEK:
	LD		A,(DOS_TGT_HANDLE)
	LD		B,A
	LD		C,_SEEK
	LD		A,2
	LD		HL,0
	LD		DE,0
	CALL	DOS
	JP		NZ,.ERROR_CLOSE
.WRITE:
	LD		DE,PROGRESS_STR
	LD		HL,STR_SAVING
	CALL	STRCPY
	PUSH	IY
	POP		HL
	LD		DE,3+7
	ADD		HL,DE
	LD		DE,PROGRESS_STR
	CALL	STRCAT
	CALL	UPDATE_PG_MSG

	PUSH	IY
	POP		HL
	LD		DE,3+7+67
	ADD		HL,DE
	EX		DE,HL
	LD		A,(DOS_TGT_HANDLE)
	LD		B,A
	LD		L,(IY+3)
	LD		H,(IY+4)
	LD		C,_WRITE
	CALL	DOS
	OR		A
	JP		NZ,.ERROR_CLOSE

	CALL	CHECK_ESC_KEY
	JP		C,.ERROR_CLOSE

	RET
	
.CLOSE:
	LD		A,(DOS_TGT_HANDLE)
	OR		A
	JR		NZ,.EXISTS2
	
	PUSH	IY
	POP		HL
	LD		DE,3+7
	ADD		HL,DE
	EX		DE,HL
	LD		B,(IY+5)
	SET		7,B
	RES		RDONLY_BIT,B
	LD		C,_CREATE
	XOR		A
	CALL	DOS
	EX		AF,AF'
	LD		A,B
	LD		(DOS_TGT_HANDLE),A
	EX		AF,AF'
	CP		ERR_FILEX
	JR		Z,.EXISTS2
	OR		A
	JP		NZ,.ERROR	
.EXISTS2:
	LD		C,_CLOSE
	LD		A,(DOS_TGT_HANDLE)
	OR		A
	RET		Z
	LD		B,A
	CALL	DOS
	XOR		A
	LD		(DOS_TGT_HANDLE),A

	PUSH	IY
	POP		HL
	LD		DE,3+7
	ADD		HL,DE
	EX		DE,HL
	LD		L,(IY+5)
	RES		7,L
	LD		C,_ATTR
	LD		A,1
	CALL	DOS
	OR		A
	JR		NZ,.ERROR
	
	PUSH	IY
	POP		HL
	LD		DE,3+7
	ADD		HL,DE
	EX		DE,HL
	LD		C,_FTIME
	LD		A,1
	LD		L,(IY+6)
	LD		H,(IY+7)
	PUSH	HL
	POP		IX
	LD		L,(IY+8)
	LD		H,(IY+9)
	CALL	DOS
	OR		A
	JR		NZ,.ERROR
	
	CALL	UPDATE_PG

	LD		HL,(COPIED_FILES)
	INC		HL
	LD		(COPIED_FILES),HL

	CALL	CHECK_ESC_KEY
	RET		C

	OR		A
	RET

.ERROR_CLOSE:

	PUSH	AF
	LD		C,_HDELETE
	LD		A,(DOS_TGT_HANDLE)
	LD		B,A
	CALL	DOS	
	XOR		A
	LD		(DOS_TGT_HANDLE),A
	POP		AF

.ERROR:	
	PUSH	AF
	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_ERROR_COPY
	CALL	STRCPY
	PUSH	IY
	POP		HL
	LD		DE,3+7
	ADD		HL,DE
	LD		DE,DOS_ERROR_MSG
	CALL	STRCAT
	POP		AF
	
	OR		A
	JR		Z,.ERROR_EXIT
	
	LD		C,_EXPLAIN
	LD		B,A
	LD		DE,DOS_ERROR_MSG2
	CALL	BDOS
	
	CALL	GET_P2
	PUSH	AF	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_MESSAGE_DLG
	POP		AF
	CALL	PUT_P2
	XOR		A
.ERROR_EXIT:
	SCF
	RET

CHECK_ESC_KEY:
	
	PUSH	IX
	PUSH	IY
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL

	LD		A,KEY_C
	CALL	KEY_IS_PRESSED
	JP		C,.ABORT
.EXIT:
	POP		HL
	POP		DE
	POP		BC
	POP		AF
	POP		IY
	POP		IX
	OR		A
	RET
	
.ABORT:
	LD		A,KEY_CTRL
	CALL	KEY_IS_PRESSED
	JP		NC,.EXIT

	LD		HL,STR_DOS_ABORT_OPERATION
	LD		DE,STR_SPACE
	CALL	GET_P2
	PUSH	AF
	LD		A,(PAGE2)
	CALL	PUT_P2
	CALL	OPEN_YES_NO_DLG
.REPLY:
	POP		AF
	CALL	PUT_P2
	LD		A,(DOS_ERROR_USER_REPLY)
	CP		ERROR_OK
	JP		NZ,.EXIT	
	POP		HL
	POP		DE
	POP		BC
	POP		AF
	POP		IY
	POP		IX
	XOR		A
	SCF
	RET	
	
VIEW_CHECK_RO_FILE:

	CALL	CHECK_ESC_KEY
	RET		C

	PUSH	DE
	LD		C,_ATTR
	XOR		A
	CALL	DOS
	POP		DE
	CP		ERR_NOFIL
	JP		Z,.EXIT
	OR		A
	RET		NZ
.ATTRIB:	
	BIT		RDONLY_BIT,L
	JP		Z,.EXIT
.VERIFY:
	LD		A,(RO_ALL)
	OR		A
	JP		NZ,.OK
	
	PUSH	HL
	PUSH	DE
	
	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_THE_FILE
	CALL	STRCPY
	POP		HL
	PUSH	HL
	LD		DE,DOS_ERROR_MSG
	CALL	STRCAT
	
	LD		HL,STR_CONFIRM_RO
	LD		DE,DOS_ERROR_MSG2
	CALL	STRCPY
	
	CALL	GET_P2
	PUSH	AF	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_CONFIRM_DLG
	POP		AF
	CALL	PUT_P2
	
	POP		DE
	POP		HL
	
	LD		A,(DOS_ERROR_USER_REPLY)
	CP		ERROR_OK
	JR		Z,.OK
	CP		ERROR_ALL
	JR		Z,.ALL
	JR		NZ,.ABORT
.ALL:
	LD		A,1
	LD		(RO_ALL),A
.OK:
	RES		RDONLY_BIT,L
	LD		A,1
	LD		C,_ATTR
	CALL	DOS
	OR		A
	RET	

.ABORT:
	XOR		A
	SCF
	RET
	
.EXIT:
	XOR		A
	RET

VIEW_CHECK_FILE:
	CALL	CHECK_ESC_KEY
	RET		C

	PUSH	DE
	LD		C,_ATTR
	XOR		A
	CALL	DOS
	POP		DE
	CP		ERR_NOFIL
	JP		Z,.EXIT
	OR		A
	RET		NZ
	
	LD		A,(OVERWRITE_ALL)
	OR		A
	JP		NZ,.OK
	
	PUSH	HL
	PUSH	DE
	
	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_THE_FILE
	CALL	STRCPY
	POP		HL
	PUSH	HL
	LD		DE,DOS_ERROR_MSG
	CALL	STRCAT
	
	LD		HL,STR_CONFIRM_OVERWRITE
	LD		DE,DOS_ERROR_MSG2
	CALL	STRCPY
	
	CALL	GET_P2
	PUSH	AF	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_CONFIRM_DLG
	POP		AF
	CALL	PUT_P2
	
	POP		DE
	POP		HL
	
	LD		A,(DOS_ERROR_USER_REPLY)
	CP		ERROR_OK
	JR		Z,.OK
	CP		ERROR_ALL
	JR		Z,.ALL
	JR		NZ,.ABORT
.ALL:
	LD		A,1
	LD		(OVERWRITE_ALL),A
.OK:
	JP		VIEW_CHECK_RO_FILE.ATTRIB

.ABORT:
	XOR		A
	SCF
	RET
	
.EXIT:
	XOR		A
	RET

	
VIEW_OPEN_MKDIR_DLG:
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	
	LD		IX,INPUT_DLG_INPUT
	XOR		A
	LD		(IX+TEXT_BOX_TEXT),A
	LD		(IX+TEXT_BOX_CUR_POS),A
	LD		(IX+TEXT_BOX_SCROLL),A
	
	LD		IX,INPUT_DIALOG
	WIN_SETUPDATE_F	WINDOW_UPDATE_MKDIR_DLG
	WIN_SETLABEL	STR_MKDIR_MSG
	CALL	WINDOW_OPEN
	RET

VIEW_MKDIR
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)

	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	LD		HL,INPUT_DLG_INPUT
	LD		BC,TEXT_BOX_TEXT
	ADD		HL,BC
	CALL	STRCAT
	
	LD		C,_CREATE
	LD		DE,DOS_CUR_PATH
	XOR		A
	LD		B,DIR_FLAG
	CALL	DOS
	OR		A
	JP		NZ,.ERROR	
	LD		IX,(CUR_VIEW)
	LD		(IX+VIEW_RESCAN),1
	RET
.ERROR:
	LD		C,_EXPLAIN
	LD		B,A
	LD		DE,DOS_ERROR_MSG2
	CALL	DOS

	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_ERROR_MKDIR
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	CALL	STRCAT
	
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_MESSAGE_DLG

	SCF
	RET
	
;; RENMOV

	
VIEW_OPEN_RENMOV_DLG:

	XOR		A
	LD		(FIRST_COPY_CHUNK),A
	LD		(FIRST_COPY_CHUNK+1),A
	LD		(FIRST_COPY_CHUNK+2),A
	LD		(CURR_COPY_CHUNK),A
	LD		(CURR_COPY_CHUNK+1),A
	LD		(CURR_COPY_CHUNK+2),A
	LD		(RO_ALL),A
	LD		(OVERWRITE_ALL),A
	LD		(COPY_ERROR),A
	
	LD		A,(PAGE2)
	CALL	PUT_P2

	LD		IX,(CUR_VIEW)

	LD		HL,STR_NUMBER_U16
	LD		DE,TMP_STR
	CALL	STRCPY
	
	CALL	VIEW_COUNT_SELECTED
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	EX		DE,HL
	
	LD		A,H
	OR		L
	JR		Z,.NO_SEL

	PUSH	HL
	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	EX		DE,HL	
	LD		HL,(OPP_VIEW)
	LD		BC,VIEW_CUR_PATH
	ADD		HL,BC
	CALL	STRLEN
	INC		B
	CALL	STRNCMP
	POP		HL
	JR		C,.OK

	LD		DE,STR_SPACE
	LD		HL,STR_ERROR_MOVE_ITSELF
	CALL	OPEN_MESSAGE_DLG	
	RET
.OK:	
	
	PUSH	IX
	LD		IX,PROGRESS_PG
	LD		(IX+PROGRESS_BAR_MAX),L
	LD		(IX+PROGRESS_BAR_MAX+1),H
	XOR		A
	LD		(IX+PROGRESS_BAR_CUR),A
	LD		(IX+PROGRESS_BAR_CUR+1),A
	LD		(PROGRESS_STR),A
	POP		IX
	
	LD		DE,TMP_STR
	CALL	U16_TO_ASCII
	
	LD		DE,STR_CONFIRM_MSG
	LD		HL,STR_MOVE_MSG
	CALL	STRCPY
	
	LD		HL,TMP_STR
	CALL	STRCAT_NOLEADSPACE
	
	LD		HL,STR_COPY_FILES
	CALL	STRCAT
	JP		.SHOW
	
.NO_SEL:
	PUSH	IX
	LD		IX,PROGRESS_PG
	LD		(IX+PROGRESS_BAR_MAX),1
	LD		(IX+PROGRESS_BAR_MAX+1),0
	XOR		A
	LD		(IX+PROGRESS_BAR_CUR),A
	LD		(IX+PROGRESS_BAR_CUR+1),A
	LD		(PROGRESS_STR),A
	POP		IX

	LD		HL,LEFT_VIEW+VIEW_CUR_PATH
	LD		DE,RIGHT_VIEW+VIEW_CUR_PATH
	CALL	STRLEN
	INC		B
	CALL	STRNCMP
	JP		NC,.RENAME

	LD		DE,STR_CONFIRM_MSG
	LD		HL,STR_MOVE_MSG
	CALL	STRCPY

	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,STR_CONFIRM_MSG
	CALL	STRCAT
	
	CALL	VIEW_FIND_SELECTED_ITEM
	
	PUSH	IY
	POP		HL
	LD		A,H
	OR		L
	RET		Z
	
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	RET		NC
	
	LD		DE,STR_CONFIRM_MSG
	CALL	STRCAT
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		DE,STR_CONFIRM_MSG;
	LD		HL,STR_TO
	CALL	STRCAT
	
.SHOW:
	LD		IX,CONFIRM_MSG
	WIN_SETLABEL	STR_CONFIRM_MSG	
.CENTER:
	LD		HL,STR_CONFIRM_MSG
	CALL	STRLEN
	LD		IY,CONFIRM_DIALOG
	LD		A,(IY+AREA_P1+PX)
	LD		D,(IY+AREA_P0+PX)
	SUB		D
	PUSH	AF
	SUB		B
	SRA		A
	LD		(IX+AREA_P0+PX),A
		
	LD		HL,(CUR_VIEW)
	LD		DE,LEFT_VIEW
	AND		A
	SBC		HL,DE
	JR		Z,.RIGHT
	LD		HL,LEFT_VIEW+VIEW_CUR_PATH
	JR		.CONT
.RIGHT:
	LD		HL,RIGHT_VIEW+VIEW_CUR_PATH
.CONT:
	LD		DE,STR_CONFIRM_MSG2
	CALL	STRCPY
	LD		DE,STR_CONFIRM_MSG2
	LD		HL,STR_QUESTION
	CALL	STRCAT

	LD		IX,CONFIRM_MSG2
	WIN_SETFLAGS	INIT_FLAGS
	WIN_SETLABEL	STR_CONFIRM_MSG2	
	LD		HL,STR_CONFIRM_MSG2
	CALL	STRLEN
	POP		AF
	SUB		B
	SRA		A
	LD		(IX+AREA_P0+PX),A
	
	LD		IX,CONFIRM_DIALOG
	WIN_SETUPDATE_F	WINDOW_UPDATE_RENMOVE_DLG
	WIN_SETLABEL	STR_MOVE_MSG	
	CALL	WINDOW_OPEN
	RET
.RENAME:
	CALL	VIEW_MOVE_FILES
	RET

;; MOVE

VIEW_MOVE_FILES:
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	
	CALL	VIEW_COUNT_SELECTED
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	EX		DE,HL
	
	LD		A,H
	OR		L
	JR		Z,.NO_SEL

	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	WIN_SETLABEL	STR_MOVE_MSG	
	CALL	WINDOW_OPEN
	POP		IX
	
	LD		A,1
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	
	LD		HL,0
	LD		(COPIED_FILES),HL
	
	CALL	MOVE_SELECTED_FILES
	CALL	FLUSH_COPY_BUFFERS
	CALL	MALLOC_COALESCE

	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,(COPIED_FILES)
	LD		A,H
	OR		L
	JR		Z,.SKIP_RESCAN
	LD		A,1
	LD		IX,(CUR_VIEW)
	LD		(IX+VIEW_RESCAN),A
	LD		IX,(OPP_VIEW)
	LD		(IX+VIEW_RESCAN),A
.SKIP_RESCAN:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	CALL	WINDOW_CLOSE
	POP		IX
	
	LD		A,0
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN

	RET
	
.NO_SEL:

	LD		HL,LEFT_VIEW+VIEW_CUR_PATH
	LD		DE,RIGHT_VIEW+VIEW_CUR_PATH
	CALL	STRLEN
	INC		B
	CALL	STRNCMP
	JP		NC,.RENAME

	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	WIN_SETLABEL	STR_COPY_MSG	
	CALL	WINDOW_OPEN
	POP		IX

	CALL	VIEW_FIND_SELECTED_ITEM
	
	LD		HL,0
	LD		(COPIED_FILES),HL

	CALL	VIEW_MOVE_FILE
	CALL	FLUSH_COPY_BUFFERS
	CALL	MALLOC_COALESCE

	LD		A,(PAGE2)
	CALL	PUT_P2

	LD		HL,(COPIED_FILES)
	LD		A,H
	OR		L
	JR		Z,.SKIP_RESCAN2
	LD		A,1
	LD		IX,(OPP_VIEW)
	LD		(IX+VIEW_RESCAN),A
	LD		IX,(CUR_VIEW)
	LD		(IX+VIEW_RESCAN),A
.SKIP_RESCAN2:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	CALL	WINDOW_CLOSE
	POP		IX
	RET
.RENAME:

	CALL	VIEW_FIND_SELECTED_ITEM
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		DE,INPUT_DLG_INPUT+TEXT_BOX_TEXT
	LD		HL,DOS_CUR_PATH
	CALL	STRCPY
	CALL	STRLEN
	
	LD		IX,INPUT_DLG_INPUT
	LD		(IX+TEXT_BOX_CUR_POS),B
	XOR		A
	LD		(IX+TEXT_BOX_SCROLL),A
	
	LD		IX,INPUT_DIALOG
	WIN_SETUPDATE_F	VIEW_UPDATE_RENAME_DLG
	WIN_SETLABEL	STR_RENAME_MSG
	
	CALL	WINDOW_OPEN
	OR		A
	RET
	
MOVE_SELECTED_FILES:
	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,(IX+WIN_CHILD+2)
	OR		A
	RET		Z
	
	CALL	PUT_P2	; FIRST
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT

	CALL	GET_P2
	PUSH	AF
	CALL	VIEW_MOVE_FILE
	CALL	UPDATE_PG
	EX		AF,AF'
	POP		AF
	CALL	PUT_P2
	EX		AF,AF'
	RET		C
	
.NEXT:
	LD		L,(IY+WIN_NEXT)
	LD		H,(IY+WIN_NEXT+1)
	LD		A,(IY+WIN_NEXT+2)
	OR		A
	RET		Z
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT
	CALL	GET_P2
	PUSH	AF
	CALL	VIEW_MOVE_FILE
	CALL	UPDATE_PG
	EX		AF,AF'
	POP		AF
	CALL	PUT_P2
	EX		AF,AF'
	RET		C

	CALL		CHECK_ESC_KEY
	RET			C 	
	
	JR		.NEXT
	RET
	
VIEW_MOVE_FILE:
	
	CALL	GET_P2
	PUSH	AF
	
	PUSH	IX
	PUSH	IY
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	LD		IY,(OPP_VIEW)	
	LD		A,(IX+VIEW_CUR_DRIVE)
	LD		B,(IY+VIEW_CUR_DRIVE)
	POP		IY
	POP		IX
	CP		B
	JR		Z,.MOVE

	PUSH	IX
	LD		IX,PROGRESS_PG
	LD		L,(IX+PROGRESS_BAR_MAX)
	LD		H,(IX+PROGRESS_BAR_MAX+1)
	ADD		HL,HL
	LD		(IX+PROGRESS_BAR_MAX),L
	LD		(IX+PROGRESS_BAR_MAX+1),H
	POP		IX
	
	POP		AF
	CALL	PUT_P2

	CALL	GET_P2
	PUSH	AF
	
	CALL	VIEW_COPY_FILE
	JP		C,.ERROR_EXIT
	
	PUSH	IX
	PUSH	IY
	CALL	FLUSH_COPY_BUFFERS
	PUSH	AF
	CALL	MALLOC_COALESCE
	POP		AF
	POP		IY
	POP		IX
	JP		C,.ERROR_EXIT
	
	POP		AF
	CALL	PUT_P2	
	CALL	VIEW_DELETE_FILE
	OR		A
	RET
	
.ERROR_EXIT:
	POP		AF
	CALL	PUT_P2
	SCF
	RET		
	
.MOVE:
	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
	LD		HL,(OPP_VIEW)
	LD		DE,VIEW_CUR_PATH+2
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH2
	CALL	STRCPY
		
	POP		AF
	CALL	PUT_P2
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCAT

	LD		DE,PROGRESS_STR
	LD		HL,STR_MOVING
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	CALL	STRCAT
	CALL	UPDATE_PG_MSG
	
	LD		DE,DOS_CUR_PATH
	LD		HL,DOS_CUR_PATH2
	LD		C,_MOVE
	CALL	DOS
	OR		A
	JP		NZ,.ERROR
	LD		HL,(COPIED_FILES)
	INC		HL
	LD		(COPIED_FILES),HL
	RET
.ERROR_MOVE:
	POP		IY
	POP		IX
	POP		AF
	CALL	PUT_P2
	SCF
	RET	
.ERROR:
	PUSH	AF
	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_ERROR_MOVE
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	LD		DE,DOS_ERROR_MSG
	CALL	STRCAT
	POP		AF
	LD		C,_EXPLAIN
	LD		B,A
	LD		DE,DOS_ERROR_MSG2
	CALL	BDOS
	
	CALL	GET_P2
	PUSH	AF	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_MESSAGE_DLG
	POP		AF
	CALL	PUT_P2
	SCF
	RET
	
VIEW_UPDATE_RENAME_DLG:
	CALL	WINDOW_UPDATE_DLG
	RET		C
	
	CP		BUTTONPRESS_EVENT
	JR		NZ,.EXIT
	
	LD		A,D
	CP		OK_BUTTON
	JR		Z,.DELETE
	CP		CANCEL_BUTTON
	JP		Z,.DISMISS
	JP		.EXIT
.DELETE:
	CALL	WINDOW_UPDATE_QUIT_DLG.DISMISS
	CALL	VIEW_RENAME
	SCF
	RET
.DISMISS:
	JP		WINDOW_UPDATE_QUIT_DLG.DISMISS
.EXIT:	
	SCF
	RET
	
VIEW_RENAME:

	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY

	LD		IX,(CUR_VIEW)
	CALL	VIEW_FIND_SELECTED_ITEM
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCAT

	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)

	LD		DE,DOS_CUR_PATH2
	LD		HL,INPUT_DLG_INPUT
	LD		BC,TEXT_BOX_TEXT
	ADD		HL,BC
	CALL	STRCPY
	
	LD		C,_RENAME
	LD		DE,DOS_CUR_PATH
	LD		HL,DOS_CUR_PATH2
	CALL	DOS
	OR		A
	JP		NZ,.ERROR	
	LD		IX,(CUR_VIEW)
	LD		(IX+VIEW_RESCAN),1
	RET
.ERROR:
	LD		C,_EXPLAIN
	LD		B,A
	LD		DE,DOS_ERROR_MSG2
	CALL	DOS

	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_ERROR_RENAME
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	CALL	STRCAT
	
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_MESSAGE_DLG

	SCF
	RET
	
;;
;; ATTRIB

	
VIEW_OPEN_ATTRIB_DLG:
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	
	LD		HL,STR_NUMBER_U16
	LD		DE,TMP_STR
	CALL	STRCPY
	
	CALL	VIEW_COUNT_SELECTED
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	EX		DE,HL
	
	LD		A,H
	OR		L
	JR		Z,.NO_SEL
	
	PUSH	IX
	LD		IX,PROGRESS_PG
	LD		(IX+PROGRESS_BAR_MAX),L
	LD		(IX+PROGRESS_BAR_MAX+1),H
	XOR		A
	LD		(IX+PROGRESS_BAR_CUR),A
	LD		(IX+PROGRESS_BAR_CUR+1),A
	LD		(PROGRESS_STR),A	
	POP		IX
	
	LD		DE,TMP_STR
	CALL	U16_TO_ASCII
	
	XOR		A
	LD		DE,STR_CONFIRM_MSG
	LD		(DE),A
	LD		HL,TMP_STR
	CALL	STRCAT_NOLEADSPACE
	
	LD		HL,STR_DELETE_FILES
	CALL	STRCAT

	LD		B,0
	
	JP		.SHOW
	
.NO_SEL:
	PUSH	IX
	LD		IX,PROGRESS_PG
	LD		(IX+PROGRESS_BAR_MAX),1
	LD		(IX+PROGRESS_BAR_MAX+1),0
	XOR		A
	LD		(IX+PROGRESS_BAR_CUR),A
	LD		(IX+PROGRESS_BAR_CUR+1),A
	LD		(PROGRESS_STR),A
	POP		IX

	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,STR_CONFIRM_MSG
	CALL	STRCPY	
	
	CALL	VIEW_FIND_SELECTED_ITEM
	
	PUSH	IY
	POP		HL
	LD		A,H
	OR		L
	RET		Z
	
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	RET		NC
	
	LD		DE,STR_CONFIRM_MSG
	CALL	STRCAT
	
	LD		B,(IY+VIEW_ITEM_ATTR)
		
	LD		A,(PAGE2)
	CALL	PUT_P2
		
.SHOW:
	LD		IX,ATTRIB_DLG_RO_CB
	XOR		A
	BIT		RDONLY_BIT,B
	JR		Z,.ARCHIVE
	LD		A,$FF
.ARCHIVE:
	LD		(IX+CHECK_BOX_VALUE),A
	
	LD		IX,ATTRIB_DLG_ARCHIVE_CB
	XOR		A
	BIT		ARCHIV_BIT,B
	JR		Z,.HIDDEN
	LD		A,$FF
.HIDDEN:
	LD		(IX+CHECK_BOX_VALUE),A
	
	LD		IX,ATTRIB_DLG_HIDDEN_CB
	XOR		A
	BIT		HIDDEN_BIT,B
	JR		Z,.SYSTEM
	LD		A,$FF
.SYSTEM:
	LD		(IX+CHECK_BOX_VALUE),A

	LD		IX,ATTRIB_DLG_SYSTEM_CB
	XOR		A
	BIT		SYSTEM_BIT,B
	JR		Z,.OPEN_WINDOW
	LD		A,$FF
.OPEN_WINDOW:
	LD		(IX+CHECK_BOX_VALUE),A

	LD		IX,ATTRIB_DLG_MSG2
	WIN_SETLABEL	STR_CONFIRM_MSG

.CENTER:
	LD		HL,STR_CONFIRM_MSG
	CALL	STRLEN
	LD		IY,ATTRIB_DIALOG
	LD		A,(IY+AREA_P1+PX)
	LD		D,(IY+AREA_P0+PX)
	SUB		D
	SUB		B
	SRA		A
	LD		(IX+AREA_P0+PX),A
		
	LD		IX,ATTRIB_DIALOG	
	CALL	WINDOW_OPEN

	RET

	
VIEW_ATTRIB_FILES:
	LD		A,(PAGE2)
	CALL	PUT_P2

	LD		B,0
	LD		IX,ATTRIB_DLG_RO_CB
	LD		A,(IX+CHECK_BOX_VALUE)
	OR		A
	JR		Z,.ARCHIVE
	SET		RDONLY_BIT,B
.ARCHIVE:
	LD		IX,ATTRIB_DLG_ARCHIVE_CB
	LD		A,(IX+CHECK_BOX_VALUE)
	OR		A
	JR		Z,.HIDDEN
	SET		ARCHIV_BIT,B
.HIDDEN:
	LD		IX,ATTRIB_DLG_HIDDEN_CB
	LD		A,(IX+CHECK_BOX_VALUE)
	OR		A
	JR		Z,.SYSTEM
	SET		HIDDEN_BIT,B
.SYSTEM:
	LD		IX,ATTRIB_DLG_SYSTEM_CB
	LD		A,(IX+CHECK_BOX_VALUE)
	OR		A
	JR		Z,.CONT
	SET		SYSTEM_BIT,B
.CONT:
	LD		A,B
	LD		(DOS_ATTR),A

	LD		IX,(CUR_VIEW)
	
	CALL	VIEW_COUNT_SELECTED
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	EX		DE,HL
	
	LD		A,H
	OR		L
	JR		Z,.NO_SEL

	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	WIN_SETLABEL	STR_ATTRIB_LABEL	
	CALL	WINDOW_OPEN
	POP		IX
	
	LD		A,1
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	
	LD		HL,0
	LD		(DELETED_FILES),HL
	
	CALL	ATTRIB_SELECTED_FILES

	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	
	LD		HL,(DELETED_FILES)
	LD		A,H
	OR		L
	JR		Z,.SKIP_RESCAN
	LD		A,1
	LD		(IX+VIEW_RESCAN),A
.SKIP_RESCAN:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	CALL	WINDOW_CLOSE
	POP		IX
	
	LD		A,0
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN

	RET
	
.NO_SEL:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	WIN_SETLABEL	STR_ATTRIB_LABEL	
	CALL	WINDOW_OPEN
	POP		IX
	
	CALL	VIEW_FIND_SELECTED_ITEM
	
	LD		A,1
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	
	LD		HL,0
	LD		(DELETED_FILES),HL

	CALL	VIEW_ATTRIB_FILE

	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)

	LD		HL,(DELETED_FILES)
	LD		A,H
	OR		L
	JR		Z,.SKIP_RESCAN2
	LD		A,1
	LD		(IX+VIEW_RESCAN),A
.SKIP_RESCAN2:
	PUSH	IX
	LD		IX,PROGRESS_DIALOG
	CALL	WINDOW_CLOSE
	POP		IX

	RET

ATTRIB_SELECTED_FILES:
	LD		L,(IX+WIN_CHILD)
	LD		H,(IX+WIN_CHILD+1)
	LD		A,(IX+WIN_CHILD+2)
	OR		A
	RET		Z
	
	CALL	PUT_P2	; FIRST
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT

	CALL	VIEW_ATTRIB_FILE
	RET		C
	
.NEXT:
	LD		L,(IY+WIN_NEXT)
	LD		H,(IY+WIN_NEXT+1)
	LD		A,(IY+WIN_NEXT+2)
	OR		A
	RET		Z
	CALL	PUT_P2
	PUSH	HL
	POP		IY
	LD		A,(IY+VIEW_ITEM_SELECTED)
	OR		A
	JR		Z,.NEXT
	CALL	VIEW_ATTRIB_FILE
	RET		C
	
	JR		.NEXT
	RET


VIEW_ATTRIB_FILE:
	
	CALL	GET_P2
	PUSH	AF
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)

	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
	POP		AF
	CALL	PUT_P2
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCAT
	
	PUSH	IX
	PUSH	IY
	LD		HL,0
	ADD		HL,SP
	LD		DE,-67
	ADD		HL,DE
	LD		SP,HL	
	EX		DE,HL
	LD		HL,DOS_CUR_PATH
	LD		BC,67
	LDIR
	
	CALL	ATTRIB_FILE_RECURSIVE
	EX		AF,AF'
	
	LD		HL,0
	ADD		HL,SP
	LD		DE,67
	ADD		HL,DE
	LD		SP,HL
	POP		IY
	POP		IX
	EX		AF,AF'
	RET
	
ATTRIB_FILE_RECURSIVE:

	LD		HL,0
	ADD		HL,SP
	PUSH	HL
	POP		IY ; IY = STACK
	INC		HL
	INC		HL

	LD		D,H
	LD		E,L
	CALL	STRLEN
	LD		C,B
	LD		B,0
	ADD		HL,BC ; PATH END
	
.FILENAME:
	DEC		HL
	LD		A,(HL)
	CP		'\'
	JR		NZ,.FILENAME
.FILENAME_START:
	INC		HL	
	PUSH	DE ; PATH (YI-2)
	PUSH	HL ; FILENAME (YI-4)

	LD		C,_ATTR
	LD		A,0
	CALL	DOS
	OR		A
	JP		NZ,.ERROR_PREPARE

	BIT		DIR_BIT,L
	JP		Z,.RETRY

;; MAKE RECURSIVE DIR HERE
	
	LD		HL,0
	ADD		HL,SP
	LD		DE,-64 
	ADD		HL,DE
	LD		SP,HL	
	EX		DE,HL
	PUSH	DE
	POP		IX ; DOS_FIB
	
	LD		L,(IY-2)
	LD		H,(IY-1)
	CALL	STRLEN
	LD		C,B
	LD		B,0
	LD		DE,DOS_CUR_PATH
	LDIR
	LD		A,'\'
	LD		(DE),A
	INC		DE
	XOR		A
	LD		(DE),A

	LD		DE,DOS_CUR_PATH
	LD		B,DIR_FLAG|HIDDEN_FLAG|SYSTEM_FLAG
	LD		C,_FFIRST
	CALL	DOS
	OR		A
	JP		NZ,.ERROR_PREPARE

.NEXT:
	PUSH	IX
	POP		HL
	INC		HL ; HL = FIB FILENAME
	LD		DE,STR_THIS_DIR
	LD		B,2
	CALL	STRNCMP
	JR		NC,.FNEXT
	
	LD		DE,STR_PREV_DIR
	LD		B,3
	CALL	STRNCMP
	JR		NC,.FNEXT
	
	CALL	INC_PG
	
	PUSH	IX
	PUSH	IY

	LD		HL,0
	ADD		HL,SP
	LD		DE,-67
	ADD		HL,DE
	LD		SP,HL

	EX		DE,HL ; DE = STACK
	PUSH	DE

	LD		L,(IY-2)
	LD		H,(IY-1)
	CALL	STRLEN
	LD		C,B
	LD		B,0
	LDIR
	LD		A,'\'
	LD		(DE),A
	XOR		A
	INC		DE
	LD		(DE),A

	POP		DE
	PUSH	IX
	POP		HL
	INC		HL ; FIB FILENAME
	CALL	STRCAT

	CALL	ATTRIB_FILE_RECURSIVE
	EX		AF,AF' ; SAVE FLAGS
	
	LD		HL,0
	ADD		HL,SP
	LD		DE,67
	ADD		HL,DE
	LD		SP,HL
	
	POP		IY
	POP		IX

	EX		AF,AF'
	JP		C,.ERROR_PREPARE

.FNEXT:
	LD		C,_FNEXT
	CALL	DOS
	CP		ERR_NOFIL
	JP		Z,.DIR_END
	OR		A
	JP		NZ,.ERROR_PREPARE
	JP		.NEXT
.DIR_END:
	LD		SP,IY
	JP		.SKIP_DIR
	
.RETRY:
	LD		L,(IY-4)
	LD		H,(IY-3)
	LD		DE,DOS_CUR_FILENAME
	CALL	STRCPY
	
	LD		L,(IY-2)
	LD		H,(IY-1)
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY

	LD		SP,IY

	LD		DE,PROGRESS_STR
	LD		HL,STR_ATTRIBUTING
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	CALL	STRCAT
	CALL	UPDATE_PG_MSG

	LD		DE,DOS_CUR_PATH
	LD		C,_ATTR
	LD		A,(DOS_ATTR)
	LD		L,A
	LD		A,1
	CALL	DOS
	OR		A
	JR		NZ,.ERROR
	LD		HL,(DELETED_FILES)
	INC		HL
	LD		(DELETED_FILES),HL

.SKIP_DIR:	
	CALL	UPDATE_PG
	
	RET
	
.ERROR_PREPARE:

	LD		L,(IY-4)
	LD		H,(IY-3)
	LD		DE,DOS_CUR_FILENAME
	CALL	STRCPY
	
	LD		L,(IY-2)
	LD		H,(IY-1)
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
.ERROR:
	LD		SP,IY
	OR		A
	JR		Z,.ERROR_EXIT

	PUSH	AF
	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_ERROR_ATTRIBUTE
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	LD		DE,DOS_ERROR_MSG
	CALL	STRCAT
	POP		AF
	LD		C,_EXPLAIN
	LD		B,A
	LD		DE,DOS_ERROR_MSG2
	CALL	BDOS
	
	CALL	GET_P2
	PUSH	AF	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_MESSAGE_DLG
	POP		AF
	CALL	PUT_P2
.ERROR_EXIT:
	SCF
	RET	
	
VIEW_OPEN_VIEW_DLG:

	LD		HL,(CUR_VIEW)
	LD		DE,VIEW_CUR_PATH
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY

	LD		IX,(CUR_VIEW)
	CALL	VIEW_FIND_SELECTED_ITEM
	RET		NC
	
	LD		A,(IY+VIEW_ITEM_ATTR)
	BIT		DIR_BIT,A
	RET		NZ
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	
	LD		DE,DOS_CUR_PATH
	CALL	STRCAT

	LD		A,(PAGE2)
	CALL	PUT_P2

.VIEW:

	CALL	SET_EDIT_FKEYS

	LD		BC,80*24
	CALL	MALLOC
	OR		A
	JP		Z,.ERROR
	
	LD		(FIRST_COPY_CHUNK),HL
	LD		(FIRST_COPY_CHUNK+2),A

	XOR		A
	LD		(USER_MENU_HANDLE),A
	LD		(READ_BUFFER_POS),A
	
	CALL	VIEW_READ_PAGE.OPEN
	
	LD		A,(PAGE2)
	LD		IX,VIEW_DIALOG	
	CALL	WINDOW_OPEN
	RET
	
.ERROR:
	PUSH	AF
	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_ERROR_VIEWING
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	LD		DE,DOS_ERROR_MSG
	CALL	STRCAT
	POP		AF
	LD		C,_EXPLAIN
	LD		B,A
	LD		DE,DOS_ERROR_MSG2
	CALL	BDOS
	
	CALL	GET_P2
	PUSH	AF	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_MESSAGE_DLG
	POP		AF
	CALL	PUT_P2
.ERROR_EXIT:
	SCF
	RET	

	
VIEW_UPDATE_VIEW_DLG:
	CALL	WINDOW_UPDATE_DLG
	PUSH	AF
	CP		EXIT_EVENT
	JP		Z,.CLOSE
	CP		KEYPRESS_EVENT
	JP		Z,.PAGE_DOWN
	CP		LCLICKPRESS_EVENT
	JP		Z,.PAGE_DOWN
	POP		AF
	RET
.PAGE_DOWN:
	LD		A,(IX+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(IX+WIN_FLAGS),A
	CALL	GET_P2
	PUSH	AF
	CALL	VIEW_READ_PAGE
	POP		AF
	CALL	PUT_P2

	POP		AF
	SCF
	RET	
.EXIT:
	OR		A
	RET
.CLOSE:
	LD		A,(FIRST_COPY_CHUNK+2)
	LD		HL,(FIRST_COPY_CHUNK)
	CALL	FREE
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	CALL	SET_NAVIGATION_FKEYS

	LD		A,(USER_MENU_HANDLE)
	OR		A
	JR		Z,.ALREADY
	LD		B,A
	LD		C,_CLOSE
	CALL	DOS

.ALREADY:

	POP		AF
	SCF
	RET

VIEW_READ_PAGE:

	LD		A,(USER_MENU_HANDLE)
	OR		A
	RET		Z

.START_READ:

	LD		A,(FIRST_COPY_CHUNK+2)
	CALL	PUT_P2
	LD		HL,(FIRST_COPY_CHUNK)
	LD		BC,80*24
.LOOP:
	LD		A,' '
	LD		(HL),A
	INC		HL
	DEC		BC
	LD		A,B
	OR		C
	JR		NZ,.LOOP

	LD		HL,(FIRST_COPY_CHUNK)
	LD		DE,0
	LD		B,0
	LD		C,80
.READ:
	CALL	READCHAR
	JP		C,.EOF
	CP		$0D
	JP		Z,.READ
	CP		$0A
	JP		Z,.NEW_LINE
	CP		32
	JP		P,.INSERT
	LD		A,' '
.INSERT:
	LD		(HL),A
	INC		HL
	DEC		C
	LD		A,C
	OR		A
	JR		NZ,.NOT_LINE
.NEW_LINE:
	PUSH	BC
	LD		B,0
	ADD		HL,BC
	POP		BC
	LD		C,80
	INC		B
	LD		A,B
	CP		24
	RET		Z
.NOT_LINE:
	JP		.READ

.OPEN:
	LD		DE,DOS_CUR_PATH
	LD		C,_OPEN
	LD		A,1
	CALL	DOS
	OR		A
	JP		NZ,.ERROR
	LD		A,B
	LD		(USER_MENU_HANDLE),A	
	JP		.START_READ

.EOF:
	LD		A,(USER_MENU_HANDLE)
	LD		B,A
	LD		C,_CLOSE
	CALL	DOS
	XOR		A
	LD		(USER_MENU_HANDLE),A
	LD		(READ_BUFFER_POS),A
	RET
.ERROR:
	PUSH	AF
	LD		DE,DOS_ERROR_MSG
	LD		HL,STR_ERROR_VIEWING
	CALL	STRCPY
	LD		HL,DOS_CUR_PATH
	LD		DE,DOS_ERROR_MSG
	CALL	STRCAT
	POP		AF
	LD		C,_EXPLAIN
	LD		B,A
	LD		DE,DOS_ERROR_MSG2
	CALL	BDOS
	
	CALL	GET_P2
	PUSH	AF	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		HL,DOS_ERROR_MSG
	LD		DE,DOS_ERROR_MSG2
	CALL	OPEN_MESSAGE_DLG
	POP		AF
	CALL	PUT_P2
.ERROR_EXIT:
	SCF
	RET	

VIEW_OPEN_HELP_DLG:
	LD		HL,DOS_PROGRAM_PATH
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
	LD		HL,DOS_CUR_PATH
	CALL	STRLEN
	
	LD		C,B
	LD		B,0
	ADD		HL,BC
	DEC 	HL
	LD		A,'P'
	LD		(HL),A
	DEC		HL
	LD		A,'L'
	LD		(HL),A
	DEC		HL
	LD		A,'H'
	LD		(HL),A
	
	JP		VIEW_OPEN_VIEW_DLG.VIEW
	
	
VIEW_SWAP_VIEWS:
	PUSH	AF
	PUSH	DE
	CALL	MENU_ITEM_UPDATE
	CALL	CONTROL_UPDATE
	POP		DE
	POP		AF

	CP		COMMAND_EVENT
	JR		Z,.EXECUTE
	CP		LCLICKPRESS_EVENT
	JR		Z,.EXECUTE
	OR		A
	RET
.EXECUTE:
.HOTKEY:
	CALL	CLOSE_MODALS

	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		HL,LEFT_VIEW+VIEW_RESCAN
	LD		DE,TMP_STR
	LD		BC,VIEW_SIZE-VIEW_RESCAN
	LDIR
	
	LD		HL,RIGHT_VIEW+VIEW_RESCAN
	LD		DE,LEFT_VIEW+VIEW_RESCAN
	LD		BC,VIEW_SIZE-VIEW_RESCAN
	LDIR
	
	LD		DE,RIGHT_VIEW+VIEW_RESCAN
	LD		HL,TMP_STR
	LD		BC,VIEW_SIZE-VIEW_RESCAN
	LDIR
	
	LD		HL,(LEFT_VIEW+WIN_CHILD)
	LD		DE,(RIGHT_VIEW+WIN_CHILD)
	LD		(RIGHT_VIEW+WIN_CHILD),HL
	LD		(LEFT_VIEW+WIN_CHILD),DE
	LD		A,(LEFT_VIEW+WIN_CHILD+2)
	EX		AF,AF'
	LD		A,(RIGHT_VIEW+WIN_CHILD+2)
	EX		AF,AF'
	LD		(RIGHT_VIEW+WIN_CHILD+2),A
	EX		AF,AF'
	LD		(LEFT_VIEW+WIN_CHILD+2),A
	
	LD		IX,(CUR_VIEW)
	CALL	WINDOW_SET_FOCUS
	
	LD		A,(LEFT_VIEW+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(LEFT_VIEW+WIN_FLAGS),A

	LD		A,(RIGHT_VIEW+WIN_FLAGS)
	SET		DIRTY_BIT,A
	LD		(RIGHT_VIEW+WIN_FLAGS),A

	LD		A,(PAGE2)
	CALL	PUT_P2
	XOR		A
	LD		(FAST_DRAW),A
	CALL	FLUSH_SCREEN
	
	RET
	
VIEW_EDIT:
	LD		A,(EDITOR_PATH)
	OR		A
	JP		Z,.ERROR_NO_EDITOR
	
	LD		HL,EDITOR_PATH
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
	LD		HL,STR_SPACE
	CALL	STRCAT
	
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,(CUR_VIEW)
	
	CALL	VIEW_FIND_SELECTED_ITEM
	RET		NC
	
	LD		A,(IY+VIEW_ITEM_ATTR)
	BIT		DIR_BIT,A
	RET		NZ
	
	PUSH	IY
	POP		HL
	LD		DE,VIEW_ITEM_FILENAME
	ADD		HL,DE
	LD		DE,DOS_CUR_PATH
	CALL	STRCAT

	LD		HL,DOS_CUR_PATH
	LD		DE,SHELL_PARAMS
	CALL	STRCPY
	CALL	MC_EXEC
	SCF
	RET
	
.ERROR_NO_EDITOR:
	LD		DE,STR_SPACE
	LD		HL,STR_NO_EDITOR
	CALL	OPEN_MESSAGE_DLG	
	RET
	

VIEW_OPEN_CONFIG_DLG:
	LD		HL,DOS_PROGRAM_PATH
	LD		DE,DOS_CUR_PATH
	CALL	STRCPY
	
	LD		HL,DOS_CUR_PATH
	CALL	STRLEN
	
	LD		C,B
	LD		B,0
	ADD		HL,BC
	DEC 	HL
	LD		A,'U'
	LD		(HL),A
	DEC		HL
	LD		A,'N'
	LD		(HL),A
	DEC		HL
	LD		A,'M'
	LD		(HL),A
	
	JP		VIEW_OPEN_VIEW_DLG.VIEW

VIEW_EDIT_FROM_VIEW:
	LD		A,(EDITOR_PATH)
	OR		A
	JP		Z,.ERROR_NO_EDITOR
	
	LD		HL,EDITOR_PATH
	LD		DE,DOS_CUR_PATH2
	CALL	STRCPY
	
	LD		HL,STR_SPACE
	CALL	STRCAT
	
	LD		HL,DOS_CUR_PATH
	CALL	STRCAT

	LD		HL,DOS_CUR_PATH2
	LD		DE,SHELL_PARAMS
	CALL	STRCPY
	CALL	MC_EXEC
	SCF
	RET
	
.ERROR_NO_EDITOR:
	LD		DE,STR_SPACE
	LD		HL,STR_NO_EDITOR
	CALL	OPEN_MESSAGE_DLG	
	RET

	
VIEW_PROMPT:
	PUSH	AF
	PUSH	DE
	CALL	MENU_ITEM_UPDATE
	CALL	CONTROL_UPDATE
	POP		DE
	POP		AF

	CP		COMMAND_EVENT
	JR		Z,.EXECUTE
	CP		LCLICKPRESS_EVENT
	JR		Z,.EXECUTE
	OR		A
	RET
.EXECUTE:
.HOTKEY:
	CALL	CLOSE_MODALS

	LD		A,(PAGE2)
	CALL	PUT_P2
	
	XOR		A
	LD		(SHELL_PARAMS),A
	CALL	MC_EXEC
	
	RET
