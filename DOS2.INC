; DOS
BDOS:	EQU	$0005
RAMAD0:	EQU	$F341
RAMAD1:	EQU	$F342
RAMAD2:	EQU	$F343
RAMAD3:	EQU	$F344
DSKROM:	EQU	$F348

EXPTBL:	EQU	$FCC1
RDSLT:	EQU	$000C
CALSLT:	EQU	$001C
RSLREG:	EQU	$0138
ENASLT:	EQU	$0024
CHSNS:	EQU	$009C	
CHGET:	EQU	$009F
EXTBIO:	EQU	$FFCA

ERROR_OK		EQU	$03
ERROR_ABORT		EQU	$01
ERROR_RETRY		EQU	$02
ERROR_ALL		EQU	$FF
ERROR_CANCEL 	EQU	$FE

_STROUT		EQU	$09

_SELDSK		EQU	$0E
_CURDRV		EQU	$19
_SETDTA		EQU	$1A
_RDABS		EQU	$2F
_ALLOC		EQU	$1B
_DPARM		EQU	$31
_FFIRST		EQU	$40
_FNEXT		EQU	$41
_OPEN		EQU	$43
_CREATE		EQU	$44
_CLOSE		EQU	$45
_READ		EQU $48
_WRITE		EQU	$49
_SEEK		EQU	$4A
_DELETE		EQU	$4D
_RENAME		EQU	$4E
_MOVE		EQU	$4F
_ATTR		EQU	$50
_FTIME		EQU	$51
_HDELETE	EQU	$52
_GETCD		EQU	$59
_CHDIR		EQU	$5A
_PARSE		EQU	$5B
_FORK		EQU	$60
_JOIN		EQU	$61
_DEFAB		EQU	$63
_DEFER		EQU	$64
_EXPLAIN	EQU	$66
_RAMD		EQU	$68
_GENV		EQU	$6B
_SENV		EQU	$6C
_DOSVER		EQU	$6F

ERR_INTER	EQU	$DF
ERR_NORAM	EQU	$DE
ERR_IBDOS	EQU	$DC
ERR_IDRV	EQU	$DB
ERR_IFNM	EQU	$DA
ERR_IPATH	EQU	$D9
ERR_PLONG	EQU	$D8
ERR_NOFIL	EQU	$D7
ERR_NODIR	EQU	$D6
ERR_DRFUL	EQU	$D5
ERR_DKFUL	EQU	$D4
ERR_DUPF	EQU	$D3
ERR_DIRE	EQU	$D2
ERR_FILRO	EQU	$D1
ERR_DIRNE	EQU	$D0
ERR_IATTR	EQU	$CF
ERR_DOT		EQU	$CE
ERR_SYSX	EQU	$CD
ERR_DIRX	EQU	$CC
ERR_FILEX	EQU	$CB
ERR_FOPEN	EQU	$CA
ERR_OV64K	EQU	$C9
ERR_FILE	EQU	$C8
ERR_EOF		EQU	$C7
ERR_ACCV	EQU	$C6
ERR_IPROC	EQU	$C5
ERR_NHAND	EQU	$C4
ERR_IHAND	EQU	$C3
ERR_NOPEN	EQU	$C2
ERR_IDEV	EQU	$C1
ERR_IENV	EQU	$C0
ERR_ELONG	EQU	$BF
ERR_IDATE	EQU	$BE
ERR_ITIME	EQU	$BD
ERR_RAMDX	EQU	$BC
ERR_NRAND	EQU	$BB
ERR_HDEAD	EQU	$BA
ERR_EOL		EQU	$B9
ERR_ISBFN	EQU	$B8

RDONLY_BIT	EQU	$00
HIDDEN_BIT	EQU	$01
SYSTEM_BIT	EQU	$02
VLABEL_BIT	EQU	$03
DIR_BIT		EQU	$04
ARCHIV_BIT	EQU	$05

RDONLY_FLAG	EQU	(1<<RDONLY_BIT)
HIDDEN_FLAG	EQU	(1<<HIDDEN_BIT)
SYSTEM_FLAG	EQU	(1<<SYSTEM_BIT)
VLABEL_FLAG	EQU	(1<<VLABEL_BIT)
DIR_FLAG	EQU	(1<<DIR_BIT)
ARCHIV_FLAG	EQU	(1<<ARCHIV_BIT)

CALLBIOS:
	
	PUSH	IX	
	PUSH	IY	
	LD		IY,(EXPTBL-1)	
	CALL	CALSLT	
	POP		IY	
	POP		IX	
	RET	

; CALSUB
;
; IN: IX = ADDRESS OF ROUTINE IN MSX2 SUBROM
;     AF, HL, DE, BC = PARAMETERS FOR THE ROUTINE
;
; OUT: AF, HL, DE, BC = DEPENDING ON THE ROUTINE
;
; CHANGES: IX, IY, AF', BC', DE', HL'
;
; CALL MSX2 SUBROM FROM MSXDOS. SHOULD WORK WITH ALL VERSIONS OF MSXDOS.
;
; NOTICE: NMI HOOK WILL BE CHANGED. THIS SHOULD POSE NO PROBLEM AS NMI IS
; NOT SUPPORTED ON THE MSX AT ALL.
;
;
CALSUB:  
	EXX
	EX     AF,AF'       ; STORE ALL REGISTERS
	LD     HL,EXTROM
	PUSH   HL
	LD     HL,$C300
	PUSH   HL           ; PUSH NOP ; JP EXTROM
	PUSH   IX
	LD     HL,$21DD
	PUSH   HL           ; PUSH LD IX,<ENTRY>
	LD     HL,$3333
	PUSH   HL           ; PUSH INC SP; INC SP
	LD     HL,0
	ADD    HL,SP        ; HL = OFFSET OF ROUTINE
	LD     A,$C3
	LD     (H_NMI),A
	LD     (H_NMI+1),HL ; JP <ROUTINE> IN NMI HOOK
	EX     AF,AF'
	EXX                 ; RESTORE ALL REGISTERS
	LD     IX,NMI
	LD     IY,(EXPTBL-1)
	CALL   CALSLT       ; CALL NMI-HOOK VIA NMI ENTRY IN ROMBIOS
					 ; NMI-HOOK WILL CALL SUBROM
	EXX
	EX     AF,AF'       ; STORE ALL RETURNED REGISTERS
	LD     HL,10
	ADD    HL,SP
	LD     SP,HL        ; REMOVE ROUTINE FROM STACK
	EX     AF,AF'
	EXX                 ; RESTORE ALL RETURNED REGISTERS
	RET
	
SET_ERROR_HANDLER:
	XOR		A
	LD		(DOS_LOCK),A
	LD		DE,ERROR_HANDLER
	LD		C,_DEFER
	CALL	BDOS
	LD		DE,ABORT_HANDLER
	LD		C,_DEFAB
	CALL	BDOS

	LD		A,($F24F)
	LD		(DOS_INSDSK_HOOK),A
	LD		A,($F24F+1)
	LD		(DOS_INSDSK_HOOK+1),A
	LD		A,($F24F+2)
	LD		(DOS_INSDSK_HOOK+2),A
	LD		A,$D2
	LD		($F24F),A
	LD		HL,INSERT_DISK_HANDLER
	LD		($F24F+1),HL

	RET
	
UNSET_ERROR_HANDLER:
	LD		DE,0
	LD		C,_DEFER
	CALL	BDOS
	LD		DE,0
	LD		C,_DEFAB
	CALL	BDOS

	LD		A,(DOS_INSDSK_HOOK)
	LD		($F24F),A
	LD		A,(DOS_INSDSK_HOOK+1)
	LD		($F24F+1),A
	LD		A,(DOS_INSDSK_HOOK+2)
	LD		($F24F+2),A

	RET

	
OPEN_MESSAGE_DLG:	
; HL ERROR MSG
; DE ERROR MSG2
	LD		IX,ERROR_DLG_MSG
	LD		(IX+WIN_LABEL),L
	LD		(IX+WIN_LABEL+1),H
	CALL	STRLEN
	SRA		B
	LD		A,35
	SUB		B
	LD		(IX+AREA_P0+PX),A
	
	LD		IX,ERROR_DLG_MSG2
	LD		(IX+WIN_LABEL),E
	LD		(IX+WIN_LABEL+1),D
	EX		DE,HL
	CALL	STRLEN
	SRA		B
	LD		A,35
	SUB		B
	LD		(IX+AREA_P0+PX),A

	LD		IX,ERROR_DLG_OK_BUTTON
	LD		A,(IX+WIN_FLAGS)
	SET		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_ABORT_BUTTON
	LD		A,(IX+WIN_FLAGS)
	RES		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_RETRY_BUTTON
	LD		A,(IX+WIN_FLAGS)
	RES		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_ALL_BUTTON
	LD		A,(IX+WIN_FLAGS)
	RES		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DIALOG
	LD		HL,STR_ERROR_LABEL
	LD		(IX+WIN_LABEL),L
	LD		(IX+WIN_LABEL+1),H
	CALL	WINDOW_OPEN
.LOOP:
	CALL	WM_UPDATE
	CALL	FLUSH_SCREEN
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,ERROR_DIALOG
	LD		A,(IX+WIN_FLAGS)
	BIT		VISIBLE_BIT,A
	JR		NZ,.LOOP
	RET
	
INSERT_DISK_HANDLER:
	LD		B,A
	;LD		HL,0
	;ADD		HL,SP
	;LD		SP,(DOS_STACK)
	;PUSH	HL ; SAVE DOS STACK
	PUSH	BC
	LD		A,(RAMAD1)
	LD		H,$40
	CALL	ENASLT
	POP		BC
	
	CALL	GET_P2
	PUSH	AF
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		A,B
	LD		(STR_INSERT_DISK_LETTER),A
	LD		DE,STR_SPACE
	LD		HL,STR_INSERT_DISK_MSG
	CALL	OPEN_MESSAGE_DLG
	
	POP		AF
	CALL	PUT_P2
	LD		A,(DSKROM)
	LD		H,$40
	CALL	ENASLT
	
	;POP		HL
	;LD		SP,HL
	POP		HL
	RET
	
DOS:
	PUSH	AF
	LD		A,(DOS_LOCK)
	OR		A
	JR		NZ,DOS_RETURN_LOCK
	LD		A,1
	LD		(DOS_LOCK),A
	XOR		A
	LD		(DOS_ERROR_USER_REPLY),A
	LD		(DOS_ERROR_CODE),A
	POP		AF
	;PUSH	HL
	;LD		HL,0
	;ADD		HL,SP
	;LD		(DOS_STACK),HL	
	;POP		HL
	CALL	BDOS
DOS_ABORT_RETURN:
	EX		AF,AF'
	XOR		A
	LD		(DOS_LOCK),A
	LD		A,(DOS_ERROR_USER_REPLY)
	CP		ERROR_ABORT
	JR		NZ,DOS_RETURN	
	LD		A,(DOS_ERROR_CODE)
	RET
DOS_RETURN:
	EX		AF,AF'
	RET
DOS_RETURN_LOCK:
	POP		AF
	RET

ERROR_HANDLER:

	PUSH	AF
	PUSH	BC
	LD		DE,DOS_ERROR_MSG
	LD		(DOS_ERROR_CODE),A
	LD		B,A
	LD		C,_EXPLAIN
	CALL	BDOS
	POP		BC
	POP		AF
	
	;LD		HL,0
	;ADD		HL,SP
	;LD		SP,(DOS_STACK)
	;PUSH	HL ; SAVE DOS STACK

	LD		C,A	
	CALL	GET_P2
	PUSH	AF
	LD		A,(PAGE2)
	CALL	PUT_P2
	
	LD		A,'@'
	ADD		A,B
	LD		(STR_DOS_ERROR_DRIVE),A

	LD		HL,DOS_ERROR_MSG
	LD		IX,ERROR_DLG_MSG
	LD		(IX+WIN_LABEL),L
	LD		(IX+WIN_LABEL+1),H
	CALL	STRLEN
	SRA		B
	LD		A,35
	SUB		B
	LD		(IX+AREA_P0+PX),A

	LD		DE,STR_SPACE
	LD		IX,ERROR_DLG_MSG2
	LD		(IX+WIN_LABEL),E
	LD		(IX+WIN_LABEL+1),D

	LD		IX,ERROR_DLG_OK_BUTTON
	LD		A,(IX+WIN_FLAGS)
	RES		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_ABORT_BUTTON
	LD		A,(IX+WIN_FLAGS)
	SET		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_RETRY_BUTTON
	LD		A,(IX+WIN_FLAGS)
	SET		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_ALL_BUTTON
	LD		A,(IX+WIN_FLAGS)
	RES		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DIALOG
	LD		HL,STR_DOS_ERROR_LABEL
	LD		(IX+WIN_LABEL),L
	LD		(IX+WIN_LABEL+1),H
	LD		A,0
	LD		(FAST_DRAW),A
	CALL	WINDOW_OPEN

.LOOP:
	CALL	WM_UPDATE
	CALL	FLUSH_SCREEN
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,ERROR_DIALOG
	LD		A,(IX+WIN_FLAGS)
	BIT		VISIBLE_BIT,A
	JP		NZ,.LOOP

	POP		AF
	CALL	PUT_P2

	;POP		HL
	;LD		SP,HL
	
	LD		A,(DOS_ERROR_USER_REPLY)
	RET

ABORT_HANDLER:
	XOR		A
	LD		(DOS_LOCK),A	
	LD		DE,DOS_ABORT_RETURN
.LOOP:
	POP		HL
	AND		A
	SBC		HL,DE
	JR		NZ,.LOOP
	LD		A,(DOS_ERROR_USER_REPLY)
	RET

ERROR_MESSAGE:	
; HL ERROR MSG
; B DRIVE LETTER
	CALL	GET_P2
	PUSH	AF
	LD		A,(PAGE2)
	CALL	PUT_P2

	LD		A,'@'
	ADD		A,B
	LD		(STR_DOS_ERROR_DRIVE),A

	LD		IX,ERROR_DLG_MSG
	LD		(IX+WIN_LABEL),L
	LD		(IX+WIN_LABEL+1),H
	CALL	STRLEN
	SRA		B
	LD		A,35
	SUB		B
	LD		(IX+AREA_P0+PX),A

	LD		DE,STR_SPACE
	LD		IX,ERROR_DLG_MSG2
	LD		(IX+WIN_LABEL),E
	LD		(IX+WIN_LABEL+1),D
	
	
	LD		IX,ERROR_DLG_OK_BUTTON
	LD		A,(IX+WIN_FLAGS)
	SET		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_ABORT_BUTTON
	LD		A,(IX+WIN_FLAGS)
	RES		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_RETRY_BUTTON
	LD		A,(IX+WIN_FLAGS)
	RES		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_ALL_BUTTON
	LD		A,(IX+WIN_FLAGS)
	RES		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DIALOG
	LD		HL,STR_ERROR_LABEL
	LD		(IX+WIN_LABEL),L
	LD		(IX+WIN_LABEL+1),H
	LD		A,0
	LD		(FAST_DRAW),A
	CALL	WINDOW_OPEN
.LOOP:
	CALL	WM_UPDATE
	CALL	FLUSH_SCREEN
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,ERROR_DIALOG
	LD		A,(IX+WIN_FLAGS)
	BIT		VISIBLE_BIT,A
	JR		NZ,.LOOP
	
	POP		AF
	CALL	PUT_P2

	RET

OPEN_CONFIRM_DLG:	
; HL ERROR MSG
; DE ERROR MSG2
	LD		IX,ERROR_DLG_MSG
	LD		(IX+WIN_LABEL),L
	LD		(IX+WIN_LABEL+1),H
	CALL	STRLEN
	SRA		B
	LD		A,35
	SUB		B
	LD		(IX+AREA_P0+PX),A
	
	LD		IX,ERROR_DLG_MSG2
	LD		(IX+WIN_LABEL),E
	LD		(IX+WIN_LABEL+1),D
	EX		DE,HL
	CALL	STRLEN
	SRA		B
	LD		A,35
	SUB		B
	LD		(IX+AREA_P0+PX),A

	LD		IX,ERROR_DLG_OK_BUTTON
	LD		A,(IX+WIN_FLAGS)
	SET		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_ABORT_BUTTON
	LD		A,(IX+WIN_FLAGS)
	SET		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A
	LD		IX,ERROR_DLG_RETRY_BUTTON
	LD		A,(IX+WIN_FLAGS)
	RES		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A

	LD		IX,ERROR_DLG_ALL_BUTTON
	LD		A,(IX+WIN_FLAGS)
	SET		VISIBLE_BIT,A
	LD		(IX+WIN_FLAGS),A

	LD		IX,ERROR_DIALOG
	LD		HL,STR_ERROR_LABEL
	LD		(IX+WIN_LABEL),L
	LD		(IX+WIN_LABEL+1),H
	LD		A,0
	LD		(FAST_DRAW),A
	CALL	WINDOW_OPEN
.LOOP:
	CALL	WM_UPDATE
	CALL	FLUSH_SCREEN
	LD		A,(PAGE2)
	CALL	PUT_P2
	LD		IX,ERROR_DIALOG
	LD		A,(IX+WIN_FLAGS)
	BIT		VISIBLE_BIT,A
	JR		NZ,.LOOP
.EXIT:
	RET
	