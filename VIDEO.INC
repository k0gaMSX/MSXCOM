SCREEN_W: 	EQU		80
SCREEN_H:	EQU		26

_DEBUG: EQU	1
%MACRO DEBUG_COLOR %N
%IF _DEBUG == 0
	PUSH	AF
	PUSH	BC
	LD		A,(_VDPWR)
	INC		A
	LD		C,A
	LD		A,#1
	OUT		(C),A
	LD		A,128+7
	OUT		(C),A
	POP		BC
	POP		AF
%ENDIF
%ENDMACRO

PREMULT_INIT:
	LD		A,(PAGE2)
	CALL	PUT_P2

	LD		BC,SCREEN_H
	LD		HL,PREMULT_TBL	
.PREMULT_LOOP:
	LD		A,SCREEN_H
	SUB		C
	
	PUSH	BC
	PUSH	HL
	
	LD		H,A
	LD		E,80
	CALL	MULT8
	
	EX		DE,HL
	
	POP		HL
	POP		BC
	
	LD		(HL),E
	INC		HL
	LD		(HL),D
	INC		HL
	DEC		BC
	LD		A,C
	OR		B
	JR		NZ,.PREMULT_LOOP
	RET

VIDEO_INIT:
	LD		A,(PAGE2)
	CALL	PUT_P2

	LD		A,(EXPTBL)
	LD		HL,VDPWR
	LD		IX,RDSLT
	CALL	CALLBIOS
	LD		(_VDPWR),A
	
	LD		A,(EXPTBL)
	LD		HL,VDPRD
	LD		IX,RDSLT
	CALL	CALLBIOS
	LD		(_VDPRD),A

	LD		A,(EXPTBL)
	LD		HL,$2B
	LD		IX,RDSLT
	CALL	CALLBIOS
	BIT		7,A
	JR		Z,.F60
	LD		A,50
	LD		(_VDPFREQ),A	
	JR		.F50
.F60:
	LD		A,60
	LD		(_VDPFREQ),A
.F50:
	LD		A,(EXPTBL)
	LD		HL,CGTABL
	LD		IX,RDSLT
	CALL	CALLBIOS
	LD		(_CGTABL),A

	LD		A,(EXPTBL)
	LD		HL,CGTABL+1
	LD		IX,RDSLT
	CALL	CALLBIOS
	LD		(_CGTABL+1),A	
	
	DI
	LD		HL,($39)
	LD		(_INT38H+1),HL
	LD		HL,INT38H
	LD		($39),HL
	EI
	
	CALL	VIDEO_SET_SCREEN

	LD		HL,NAME_TBL
	LD		BC,SCREEN_W*(SCREEN_H+1)
.CLR_NAME:
	LD		A,32
	LD		(HL),A
	INC		HL
	DEC		BC
	LD		A,C
	OR		B
	JR		NZ,.CLR_NAME

	LD		HL,COLOR_TBL
	LD		BC,10*(SCREEN_H+1)
.CLR_COLOR:
	LD		A,$00
	LD		(HL),A
	INC		HL
	DEC		BC
	LD		A,C
	OR		B
	JR		NZ,.CLR_COLOR			
	
	LD		A,0
	LD		(SCR_DIRTY),A
	
	LD		HL,0
	LD		(VDP_TICK),HL
	LD		(MOUSE_POS_X),HL
	LD		(MOUSE_POS_Y),HL
	LD		(LBUTTON_TICK),HL
	LD		(RBUTTON_TICK),HL
	
	XOR		A
	LD		(MOUSE_LDOUBLECLICK),A
	LD		(MOUSE_RDOUBLECLICK),A
	LD		(MOUSE_RBUTTON),A
	LD		(MOUSE_LBUTTON),A
	
	LD		(SCR_CUR_PAGE),A

	LD		HL,-1
	LD		(CURSOR_POS),HL
		
	LD		HL,0
	LD		DE,$501B
	CALL	VIDEO_SET_CLIP

	RET
	
VIDEO_SET_CLIP:
; H: X
; L: Y
; D: W
; E: H
	BIT		7,H
	JR		Z,.CHECK_RIGHT				; LESS THAN 0 ?
	LD		A,D
	ADD		A,H
	JP		P,.STORE_W
.INVALID_CLIP:
	LD		HL,0						; INVALID CLIP
	LD		DE,0
	JP		.STORE_CLIP
.STORE_W:
	LD		D,A
.CHECK_RIGHT:
	LD		A,SCREEN_W
	SUB		H
	JP		M,.INVALID_CLIP				; OUT OF BOUNDS
	CP		D
	JP		P,.CHECK_UPPER
	LD		D,A
.CHECK_UPPER:
	BIT		7,L
	JR		Z,.CHECK_BOTTOM				; LESS THAN 0 ?
	LD		A,E
	ADD		A,L
	JP		P,.STORE_H
	JP		.INVALID_CLIP
.STORE_H:
	LD		E,A
.CHECK_BOTTOM:
	LD		A,SCREEN_H
	SUB		L
	JP		M,.INVALID_CLIP				; OUT OF BOUNDS
	CP		E
	JP		P,.STORE_CLIP
	LD		E,A
.STORE_CLIP:
	LD		(SCR_CLIP_Y),HL
	LD		(SCR_CLIP_H),DE
	RET
	
VIDEO_SET_SCREEN:

	LD		IX,DISSCR
	CALL	CALLBIOS

	LD		A,0
	LD		IX,INITXT ;CHGMOD
	CALL	CALLBIOS
	
	LD		A,1
	CALL	MAKE_CHARSET

	DI
	
	LD		A,(_VDPWR)
	INC		A
	LD		C,A
	
	LD		A,(RG0SAV)
	AND		11110000B
	OR		00000100B
	OUT		(C),A
	LD		A,128+0
	OUT		(C),A
	
	LD		A,(RG1SAV)
	AND		01100011B
	OR		00010000B
	OUT		(C),A
	LD		A,128+1
	OUT		(C),A
	
	LD		A,00000011B
	OUT		(C),A
	LD		A,128+2
	OUT		(C),A

	LD		A,00101111B
	OUT		(C),A
	LD		A,128+3
	OUT		(C),A
		
	LD		A,00000010B
	OUT		(C),A
	LD		A,128+4
	OUT		(C),A

	LD		A,$071
	OUT		(C),A
	LD		A,128+7
	OUT		(C),A

	LD		A,(RG8SAV)	
	AND		11111011B
	OUT		(C),A
	LD		A,128+8
	OUT		(C),A

	LD		A,(RG9SAV)	
	OR		10000000B
	OUT		(C),A
	LD		A,128+9
	OUT		(C),A
	
	LD		A,00000000B
	OUT		(C),A
	LD		A,128+10
	OUT		(C),A

	LD		A,$0F4	
	OUT		(C),A
	LD		A,128+12
	OUT		(C),A
	
	LD		A,$0F0	
	OUT		(C),A
	LD		A,128+13
	OUT		(C),A
	EI

	CALL	SET_PALETTE
	CALL	ERASE_FNKEYS
	
	LD		IX,ENASCR
	CALL	CALLBIOS

	RET
	
VIDEO_RESTORE_SCREEN:
	LD		IX,DISSCR
	CALL	CALLBIOS
	
	LD		A,0
	LD		IX,CHGMOD
	CALL	CALLBIOS
	
	LD		A,80
	LD		(LINLEN),A
	LD		A,24
	LD		(CRTCNT),A		
	
	XOR		A
	CALL	MAKE_CHARSET

	LD		IX,INIPLT
	CALL 	CALSUB
	
	DI
	
	LD		A,(_VDPWR)
	INC		A
	LD		C,A
	
	LD		A,(RG0SAV)
	AND		11110000B
	OR		00000100B
	OUT		(C),A
	LD		A,128+0
	OUT		(C),A
	
	LD		A,(RG1SAV)
	AND		01100011B
	OR		00010000B
	OUT		(C),A
	LD		A,128+1
	OUT		(C),A
	
	LD		A,00000011B
	OUT		(C),A
	LD		A,128+2
	OUT		(C),A

	LD		A,00101111B
	OUT		(C),A
	LD		A,128+3
	OUT		(C),A
		
	LD		A,00000010B
	OUT		(C),A
	LD		A,128+4
	OUT		(C),A

	LD		A,(RG7SAV)	
	OUT		(C),A
	LD		A,128+7
	OUT		(C),A

	LD		A,(RG8SAV)	
	AND		11111011B
	OUT		(C),A
	LD		A,128+8
	OUT		(C),A

	LD		A,(RG9SAV)	
	OUT		(C),A
	LD		A,128+9
	OUT		(C),A
	
	LD		A,00000000B
	OUT		(C),A
	LD		A,128+10
	OUT		(C),A

	LD		A,(RG12SA)
	OUT		(C),A
	LD		A,128+12
	OUT		(C),A
	
	LD		A,(RG13SA)
	OUT		(C),A
	LD		A,128+13
	OUT		(C),A
	EI
	
	
	CALL	RESTORE_FNKEYS

	DI
	LD		HL,(_INT38H+1)
	LD		($39),HL
	EI

	LD		IX,ENASCR
	CALL	CALLBIOS
	
	RET
	
MAKE_CHARSET:
	PUSH	AF
	LD		A,(RG4SAV)
	LD		H,A
	LD		L,0
	ADD		HL,HL
	ADD		HL,HL
	ADD		HL,HL
	LD		IX,SETRD
	CALL	CALLBIOS

	LD		HL,NAME_TBL
	EXX
	LD		BC,2048
	EXX
	LD		A,(_VDPRD)
	LD		C,A
.READ_LOOP:
	IN		A,(C)
	LD		(HL),A
	INC		HL
	EXX
	DEC		BC
	LD		A,B
	OR		C
	EXX
	JR		NZ,.READ_LOOP

	LD		HL,BACKSLASH
	LD		DE,NAME_TBL+'\'*8
	LD		BC,8
	LDIR
			
	LD		HL,NAME_TBL
	LD		DE,NAME_TBL+1024
	LD		BC,1024
	LDIR
	
	POP		AF
	OR		A
	JR		Z,.SKIP_INV

	LD		HL,NAME_TBL+1024
	LD		BC,1024
.INVLOOP:
	LD		A,(HL)
	CPL
	LD		(HL),A
	INC		HL
	DEC		BC
	LD		A,C
	OR		B
	JR		NZ,.INVLOOP

.SKIP_INV:

	LD		HL,CURSOR
	LD		DE,NAME_TBL+$FF*8
	LD		BC,8
	LDIR

	LD		A,0
	LD		BC,$04000
	LD		HL,$00000
	LD		IX,FILVRM
	CALL	CALLBIOS

	LD		HL,$01000
	LD		IX,SETWRT
	CALL	CALLBIOS

	LD		HL,NAME_TBL
	EXX
	LD		BC,2048
	EXX
	LD		A,(_VDPWR)
	LD		C,A
.WRITE_LOOP:
	LD		A,(HL)
	OUT		(C),A
	INC		HL
	EXX
	DEC		BC
	LD		A,B
	OR		C
	EXX
	JR		NZ,.WRITE_LOOP

	LD		HL,$03000
	LD		IX,SETWRT
	CALL	CALLBIOS

	LD		HL,NAME_TBL
	EXX
	LD		BC,2048
	EXX
	LD		A,(_VDPWR)
	LD		C,A
.WRITE_LOOP2:
	LD		A,(HL)
	OUT		(C),A
	INC		HL
	EXX
	DEC		BC
	LD		A,B
	OR		C
	EXX
	JR		NZ,.WRITE_LOOP2
	
	RET

SET_PALETTE:
	DI
	LD		A,(_VDPWR)
	INC		A
	LD		C,A

	LD		A,1 ; BLACK
	OUT		(C),A
	LD		A,16+128
	OUT		(C),A
	LD		HL,BLACK_PAL
	INC		C
	OUTI
	OUTI

	DEC		C
	LD		A,4 ; BLUE
	OUT		(C),A
	LD		A,16+128
	OUT		(C),A
	LD		HL,BLUE_PAL
	INC		C
	OUTI
	OUTI
	
	DEC		C
	LD		A,7 ; BLUE
	OUT		(C),A
	LD		A,16+128
	OUT		(C),A
	LD		HL,CYAN_PAL
	INC		C
	OUTI
	OUTI

	DEC		C
	LD		A,15 ; BLUE
	OUT		(C),A
	LD		A,16+128
	OUT		(C),A
	LD		HL,WHITE_PAL
	INC		C
	OUTI
	OUTI
		
	EI
	RET
	
VIDEO_FLUSH:

	LD		A,(SCR_DIRTY)
	OR		A
	JR		NZ,.RENDER
	CALL	UPDATE_CURSOR
	RET
.RENDER:

	LD		A,(PAGE2)
	CALL	PUT_P2

	LD		A,(SCR_CUR_PAGE)
	OR		A
	JR		Z,.PAGE_ONE
	LD		BC,$0000
	JR		.FLUSH
.PAGE_ONE:
	LD		BC,$2000
.FLUSH:
	PUSH	BC
	LD		HL,$0000
	ADD		HL,BC
	LD		IX,SETWRT
	CALL	CALLBIOS

	LD		HL,NAME_TBL
	EXX
	LD		BC,SCREEN_W*(SCREEN_H+1)
	EXX
	LD		A,(_VDPWR)
	LD		C,A
.NAME_LOOP:
	LD		A,(HL)
	OUT		(C),A
	INC		HL
	EXX
	DEC		BC
	LD		A,B
	OR		C
	EXX
	JR		NZ,.NAME_LOOP
	POP		BC
.FLUSH_COLOR:
	PUSH	BC
	LD		HL,$0A00
	ADD		HL,BC
	LD		IX,SETWRT
	CALL	CALLBIOS

	LD		HL,COLOR_TBL
	EXX
	LD		BC,10*(SCREEN_H+1)
	EXX
	LD		A,(_VDPWR)
	LD		C,A
.COLOR_LOOP:
	LD		A,(HL)
	OUT		(C),A
	INC		HL
	EXX
	DEC		BC
	LD		A,B
	OR		C
	EXX
	JR		NZ,.COLOR_LOOP
	POP		BC
.DRAW_MOUSE:
	PUSH	BC
	
	LD		HL,(MOUSE_POS_Y)
	LD		DE,(MOUSE_POS_X)
	SRL		E
	SRL		L
	SRL		L
	
	ADD		HL,HL
	LD		BC,PREMULT_TBL
	ADD		HL,BC
	LD		C,(HL)
	INC		HL
	LD		B,(HL)
	LD		H,0
	LD		L,E
	ADD		HL,BC
	
	LD		A,L
	AND		7
	LD		D,A
	LD		A,7
	SUB		D
	
	SRA		H
	RR		L
	SRA		H
	RR		L
	SRA		H
	RR		L 		; HL>>3	

	PUSH	HL
	LD		BC,COLOR_TBL
	ADD		HL,BC
	
	LD		C,A
	LD		B,C
	LD		A,(HL)
	LD		D,A
	XOR		A
	OR		B
	LD		A,D
	JR		Z,.BIT_0
.FIND_BIT:
	RRCA
	DJNZ	.FIND_BIT
.BIT_0:
	BIT		0,A
	JR		Z,.SET_BIT
	RES		0,A
	JR		.REST_BIT
.SET_BIT:
	SET		0,A
.REST_BIT:
	LD		B,C
	LD		D,A
	XOR		A
	OR		B
	LD		A,D
	JR		Z,.BIT_0_2
.FIND_BIT_2:
	RLCA	
	DJNZ	.FIND_BIT_2
.BIT_0_2:
	POP		HL
	POP		BC
.DRAW_CURSOR:
	PUSH	BC
	ADD		HL,BC
	LD		BC,$0A00
	ADD		HL,BC
	PUSH	AF
	LD		IX,SETWRT
	CALL	CALLBIOS
	
	LD		A,(_VDPWR)
	LD		C,A
	POP		AF
	OUT		(C),A ; DRAW MOUSE CURSOR

	POP		BC
	
	LD		DE,(CURSOR_POS)
	LD		HL,SCREEN_W*(SCREEN_H+1)
	AND		A
	SBC		HL,DE
	JP		M,.SKIP_CURSOR
	
	LD		HL,$0000
	ADD		HL,BC
	ADD		HL,DE
	LD		IX,SETWRT
	CALL	CALLBIOS
	LD		A,(_VDPWR)
	LD		C,A
	LD		A,$FF
	OUT		(C),A; DRAW CURSOR
	
	CALL	UPDATE_CURSOR
	
.SKIP_CURSOR:	
	LD		A,(SCR_CUR_PAGE)
	OR		A
	JR		Z,.SET_PAGE_ONE
	XOR		A
	LD		(SCR_CUR_PAGE),A
	CALL	VIDEO_SET_PAGE
	JR		.EXIT
	
.SET_PAGE_ONE:
	LD		A,1
	LD		(SCR_CUR_PAGE),A
	CALL	VIDEO_SET_PAGE
.EXIT:
	XOR		A
	LD		(SCR_DIRTY),A	
	RET
	
VIDEO_SET_CURSOR:
; H : X 
; L : Y
	PUSH	AF
	PUSH	DE
	PUSH	HL
	LD		A,H
	LD		H,0
	ADD		HL,HL
	EX		DE,HL
	LD		HL,PREMULT_TBL
	ADD		HL,DE
	LD		E,(HL)
	INC		HL
	LD		D,(HL)
	LD		H,0
	LD		L,A
	ADD		HL,DE
	LD		(CURSOR_POS),HL
	LD		A,1
	LD		(SCR_DIRTY),A
	POP		HL
	POP		DE
	POP		AF
	RET
/*	
VIDEO_PRINT_STR:
; HL: STRING
; D: COLUMN
; E: LINE
; A: ATTR: BIT 7: INVERSE, BIT 0: BLINK

	PUSH	AF
	LD		A,H
	OR		L
	JR		NZ,.CONT
	POP		AF
	RET
.CONT:
	POP		AF

	LD		B,-1
	PUSH	AF
	PUSH	HL
.LOOP_SIZE:
	LD		A,(HL)
	INC		HL
	INC		B
	OR		A
	JR		NZ,.LOOP_SIZE
	POP		HL
	POP		AF

VIDEO_PRINT_CLIP:
; HL: STRING
; B: SIZE
; D: COLUMN
; E: LINE
; A: ATTR: BIT 7: INVERSE, BIT 0: BLINK
		
	PUSH	AF
	LD		A,H
	OR		L
	JR		NZ,.CONT
	POP		AF
	RET
.CONT:

	;PUSH	AF
	PUSH	HL
	
	LD		A,(SCR_CLIP_Y)
	LD		L,A
	LD		A,(SCR_CLIP_H)
	LD		H,A
	LD		A,E
	SUB		L
	SUB		H
	JR		C,.CHECK_HORZ
.OFF_CLIP:
	POP		HL
	POP		AF
	RET
.CHECK_HORZ:
	
	LD		A,(SCR_CLIP_X)
	LD		L,A

	LD		A,D
	SUB		L
	JP		P,.RIGHT_CLIP

	LD		D,L			; CLIP ON LEFT
	PUSH	AF
	NEG
	LD		L,A
	LD		A,B
	SUB		L
	JP		PO,.LEFT_CLIP
	
	POP		AF			; ENTIRE CLIPPED ON LEFT
	POP		HL
	POP		AF
	RET
	
.LEFT_CLIP:
	LD		B,A			; CORRECT STRING SIZE
	POP		AF
	POP		HL
	NEG
	ADD		A,L			; ADJUST STRING START
	LD		L,A
	LD		A,0
	ADC		A,H
	LD		H,A
	PUSH	HL

.RIGHT_CLIP:
	LD		A,(SCR_CLIP_W)
	SUB		D
	JP		M,.OFF_CLIP
	SUB		B
	JP		P,.CONT2
	ADD		A,B
	LD		B,A			; ADJUSTR STRING SIZE
.CONT2:
	POP		HL
	POP		AF
*/
VIDEO_PRINT_SIZE:
; HL: STRING
; B: SIZE
; D: COLUMN
; E: LINE
; A: ATTR: BIT 7: INVERSE, BIT 0: BLINK

	PUSH	AF
	LD		A,H
	OR		L
	JR		NZ,.CONT
	POP		AF
	RET
.CONT:

	CALL	GET_P2
	LD		C,A
	LD		A,(PAGE2)
	CALL	PUT_P2

	POP		AF	
	EX		AF,AF'
	XOR		A
	OR		B		; 0 SIZED ?
	RET		Z

	EX		AF,AF'
	
	PUSH	BC
	PUSH	AF
	PUSH	DE
	
	EXX
	POP		HL
	LD		C,H
	LD		H,0
	ADD		HL,HL	; LINE * 2
	LD		DE,PREMULT_TBL
	ADD		HL,DE	; HL=PREMULT_TBL + LINE * 2
	LD		E,(HL)
	INC		HL
	LD		D,(HL)  ; DE = LINE * 80
	
	LD		L,C
	LD		H,0
	ADD		HL,DE	; HL=LINE * 80 + COL
	PUSH	HL
	
	LD		DE,NAME_TBL
	ADD		HL,DE
	EX		DE,HL	; DE=NAME_TBL + LINE * 80 + COL
	
	PUSH	DE
	EXX	
	POP		DE
	
	AND		10000000B
	LD		C,A
	
	PUSH	BC
.LOOP_NAME:
	LD		A,(HL)
	ADD		A,C		; ADD ATTR
	LD		(DE),A	; STORE CHAR
	INC		DE
	INC		HL
	DJNZ	.LOOP_NAME
	
.COLOR:
	POP		BC	
	POP		HL		; HL=LINE * 80 + COL
	LD		A,L
	AND		7
	LD		C,A
	LD		A,7
	SUB		C 		; A = ATTR BIT POSITION
	LD		C,A
	
	SRA		H
	RR		L
	SRA		H
	RR		L
	SRA		H
	RR		L 		; HL>>3
	LD		DE,COLOR_TBL
	ADD		HL,DE	; HL=COLOR_TBL+(LINE*80+COL)>>3
	
	POP		AF
	AND		1
	LD		E,A		; OR MASK
	LD		D,11111110B ; AND MASK

	PUSH	BC	
	LD		B,C		; B=BIT POSITION	
.SET_BIT_POS:
	LD		A,E
	RLCA
	LD		E,A
	LD		A,D
	RLCA
	LD		D,A	
	DJNZ	.SET_BIT_POS
	
	POP		BC		; B = NUMBER OF CHARS	

.LOOP_COLOR:
	LD		A,(HL)
	AND		D
	OR		E
	LD		(HL),A
	BIT		0,D
	JR		NZ,.NEXT_BIT
	INC		HL
.NEXT_BIT:
	LD		A,E
	RRCA
	LD		E,A
	LD		A,D
	RRCA
	LD		D,A	
	DJNZ	.LOOP_COLOR

	LD		A,1
	LD		(SCR_DIRTY),A
	
	POP		BC
	LD		A,C
	CALL	PUT_P2
	
	RET

VIDEO_SET_PAGE:
; A= CURRENT PAGE: 0 OR 1

	EX		AF,AF'
	LD		A,(_VDPWR)
	INC		A
	LD		C,A
	EX		AF,AF'

	OR		A
	JR		NZ,.PAGE_ONE

	DI
	; PAGE 0

	LD		A,00000011B
	OUT		(C),A
	LD		A,128+2
	OUT		(C),A

	LD		A,00101111B
	OUT		(C),A
	LD		A,128+3
	OUT		(C),A
	
	LD		A,00000000B
	OUT		(C),A
	LD		A,128+10
	OUT		(C),A

	;LD		A,00000010B
	;OUT		(C),A
	;LD		A,128+4
	;OUT		(C),A

	EI
	RET

.PAGE_ONE:
	DI

	LD		A,00001011B
	OUT		(C),A
	LD		A,128+2
	OUT		(C),A

	LD		A,10101111B
	OUT		(C),A
	LD		A,128+3
	OUT		(C),A
	
	LD		A,00000000B
	OUT		(C),A
	LD		A,128+10
	OUT		(C),A

	;LD		A,00000110B
	;OUT		(C),A
	;LD		A,128+4
	;OUT		(C),A

	EI
	RET

ERASE_FNKEYS:

	LD		B,16
	LD		DE,OLD_FNKEYS
	LD		HL,FNKSTR
.LOOP:
	LD		A,(HL)
	LD		(DE),A
	INC		DE
	XOR		A
	LD		(HL),A
	LD		A,16
	ADD		A,L
	LD		L,A
	LD		A,0
	ADC		A,H
	LD		H,A
	DJNZ	.LOOP

	RET
	
RESTORE_FNKEYS:
 	LD		B,16
	LD		DE,OLD_FNKEYS
	LD		HL,FNKSTR
.LOOP:
	LD		A,(DE)
	LD		(HL),A
	INC		DE
	LD		A,16
	ADD		A,L
	LD		L,A
	LD		A,0
	ADC		A,H
	LD		H,A
	DJNZ	.LOOP

	RET
	
INT38H:
	DI
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY
	EXX
	PUSH	BC
	PUSH	DE
	PUSH	HL
	EX		AF,AF'
	PUSH	AF
	
	LD		HL,(VDP_TICK)
	INC		HL
	LD		(VDP_TICK),HL
		
	;LD		A,L
	;AND		1
	;OR		A
	;JR		NZ,.SKIP
	CALL	READ_MOUSE_BUTTONS	
.SKIP:

	POP		AF
	EX		AF,AF'
	POP		HL
	POP		DE
	POP		BC
	EXX
	POP		IY
	POP		IX
	POP		HL
	POP		DE
	POP		BC
	POP		AF

_INT38H:
	JP		$0000
	
UPDATE_CURSOR:

	LD		A,(PAGE2)
	CALL	PUT_P2

	LD		DE,(CURSOR_POS)
	LD		HL,NAME_TBL
	ADD		HL,DE
	LD		A,(HL) ;CHARACTER
	
	LD		L,A
	LD		H,0
	ADD		HL,HL
	ADD		HL,HL
	ADD		HL,HL
	
	LD		DE,$1000
	ADD		HL,DE
	LD		IX,SETRD
	CALL	CALLBIOS
	LD		HL,TMP_STR
	LD		A,(_VDPRD)
	LD		C,A
	LD		B,8
	INIR

	LD		HL,$17F8
	LD		IX,SETWRT
	CALL	CALLBIOS
	
	LD		A,(_VDPWR)
	LD		C,A
	LD		B,5
	LD		HL,TMP_STR
	OTIR

	LD		A,(VDP_TICK)
	BIT		4,A
	JR		Z,.INVERSE
	
	LD		B,3
	OTIR
	RET
	
.INVERSE:
	LD		B,3
.LOWER_CUR_INV:
	LD		A,(HL)
	INC		HL
	CPL
	OUT		(C),A
	DJNZ	.LOWER_CUR_INV
	RET
	
	
BACKSLASH:
DB		00000000B
DB		00000000B
DB		10000000B
DB		01000000B
DB		00100000B
DB		00010000B
DB		00001000B
DB		00000000B
	
CURSOR:
DB		11111111B
DB		11111111B
DB		11111111B
DB		11111111B
DB		11111111B
DB		11111111B
DB		11111111B
DB		11111111B
	
BLACK_PAL:
DB		00000000B,	00000000B
CYAN_PAL:
DB		00000111B,	00000111B
BLUE_PAL:
DB		00000111B,	00000000B
WHITE_PAL:
DB		01110111B,	00000111B
